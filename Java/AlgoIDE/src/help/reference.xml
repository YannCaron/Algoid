<?xml version="1.0" encoding="utf-8"?>
<al>
	<structure keyword="instruction">
		<description>
			<section type="text" lang="en">The unit of expression is a statement.&lt;br&gt;In AL Semicolon is entirelly optional. It exists because AL is inspired from C and in C semicolon is mendatory. So you can write your program with ou without. Prefer with, because the majority of languages ??requested it. It's become a habit.</section>
			<section type="text" lang="fr">L'élément unitaire du langage AL est l'instruction.&lt;br&gt;En AL, le point-virgule est totalement optionnel. Il existe parce qu'AL est inspiré du C et qu'en C il est obligatoire. Donc vous pouvez écrire votre programme avec ou sans. Préférez avec parce que la majorité des langages le demande. Ca devient une habitude.</section>
			<section type="bnf">instruction [';']</section>
			<section type="text" lang="en">Instruction are divided in two familly : the expression and the controls (imperative one).</section>
			<section type="text" lang="fr">Les instructions en AL se divisent en deux familles : les expressions (ou valeurs du programme) et les instructions de contrôle (issu de l'impératif).</section>
		</description>
	</structure>
	<structure keyword="block">
		<description>
			<section type="text" lang="en">Block is a self scoped suite of instructions.&lt;br&gt;Scope means that if variables are declared into it, its will be deleted a the end of the block.</section>
			<section type="text" lang="fr">Un bloc est une suite d'instructions encapsulées dans une portée locale.&lt;br&gt;La portée signifie que toute variable déclarée à l'intérieur n'est accessible que depuis cette portée et qu'elle sera détruite dès la sortie de celle-ci.</section>
			<section type="bnf">'{' {[instruction]} '}'</section>
		</description>
	</structure>
	<structure keyword="expression">
		<description>
			<section type="text" lang="en">Al support several types of expression : VOID, BOOLEAN, NUMBER, STRING, FUNCTION, OBJECT, ARRAY.&lt;br&gt;AL is a dynamically typed language, so it is not necessary to manage types. Transtyping is automatic.</section>
			<section type="text" lang="fr">Toute valeur du langage s'appelle une expression. AL comprend plusieurs types d'expressions : VOID, BOOLEAN, NUMBER, STRING, FUNCTION, OBJECT, ARRAY.&lt;br&gt;AL est un langage dynamique, il ne nécessite pas de manipulation des types. Le trans-typage ce fait automatiquement, selon le besoin et les opérateurs utilisés.</section>
			<section type="bnf">&lt;br&gt;nil&lt;br&gt;true | false&lt;br&gt;nan | infinity | number&lt;br&gt;'"' string '"'&lt;br&gt;array | function | object&lt;br&gt;ident '[' expr ']'</section>
			<section type="text" lang="en">Binary operators in expressions can be :</section>
			<section type="text" lang="fr">Les opérateurs binaires sont les suivant :</section>
			<section type="text" lang="en">
			&lt;table class="standard"&gt;
				&lt;tr&gt;&lt;th&gt;symbol&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&amp;&amp;&lt;/td&gt;&lt;td&gt;(boolean) and : true and true is true&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;||&lt;/td&gt;&lt;td&gt;(boolean) or : true or false is true&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;==&lt;/td&gt;&lt;td&gt;is equals&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;!=&lt;/td&gt;&lt;td&gt;is differents&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&lt;&lt;/td&gt;&lt;td&gt;is less than&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&gt;&lt;/td&gt;&lt;td&gt;is greater than&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&lt;=&lt;/td&gt;&lt;td&gt;is less or equals&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&gt;=&lt;/td&gt;&lt;td&gt;is greater or equals&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;(number) plus&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;(number) minus&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;(number) multiply&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;/&lt;/td&gt;&lt;td&gt;(number) divide&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;(number) modulo&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;..&lt;/td&gt;&lt;td&gt;(string) concat&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&gt;&lt;/td&gt;&lt;td&gt;(function) then&lt;/td&gt;&lt;/tr&gt;
			&lt;/table&gt;
		</section>
			<section type="text" lang="fr">
			&lt;table class="standard"&gt;
				&lt;tr&gt;&lt;th&gt;symbole&lt;/th&gt;&lt;th&gt;déscription&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&amp;&amp;&lt;/td&gt;&lt;td&gt;(booléen) et : true (vrai) et true (vrai) donne true (vrai)&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;||&lt;/td&gt;&lt;td&gt;(booléen) ou : true (vrai) ou false (faux) donne true (vrai)&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;==&lt;/td&gt;&lt;td&gt;est égale&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;!=&lt;/td&gt;&lt;td&gt;est différent&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&lt;&lt;/td&gt;&lt;td&gt;est plus petit que&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&gt;&lt;/td&gt;&lt;td&gt;est plus grand que&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&lt;=&lt;/td&gt;&lt;td&gt;est plus petit ou égale à&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;&gt;=&lt;/td&gt;&lt;td&gt;est plus grand ou égale à&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;+&lt;/td&gt;&lt;td&gt;(number) plus&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;(number) moins&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;(number) multiplie&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;/&lt;/td&gt;&lt;td&gt;(number) divise&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;%&lt;/td&gt;&lt;td&gt;(number) modulo&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;..&lt;/td&gt;&lt;td&gt;(string) concatène&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&gt;&lt;/td&gt;&lt;td&gt;(function) puis&lt;/td&gt;&lt;/tr&gt;
			&lt;/table&gt;
		</section>
			<section type="text" lang="en">unary operators in expressions can be :</section>
			<section type="text" lang="fr">Les opérateurs unaires sont les suivants :</section>
			<section type="text" lang="en">
			&lt;table class="standard"&gt;
				&lt;tr&gt;&lt;th&gt;symbol&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;!&lt;/td&gt;&lt;td&gt;(boolean) not : !true is false&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;(number) minus : -i is equivalent to 0 - i&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;++&lt;/td&gt;&lt;td&gt;increment : i++ is equivalent to i = i + 1 or i += 1&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;--&lt;/td&gt;&lt;td&gt;decrement : i-- is equivalent to i = i - 1 or i -= 1&lt;/td&gt;&lt;/tr&gt;
			&lt;/table&gt;
			</section>
			<section type="text" lang="fr">
				&lt;table class="standard"&gt;
				&lt;tr&gt;&lt;th&gt;symbole&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;!&lt;/td&gt;&lt;td&gt;(boolean) not (non) : !true (non vrai) donne false (faux)&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;(number) moins : -i est équivaut à 0 - i&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;++&lt;/td&gt;&lt;td&gt;incrementation : i++ équivaut à i = i + 1 ou i += 1&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;--&lt;/td&gt;&lt;td&gt;decrement : i-- équivaut à i = i - 1 ou i -= 1&lt;/td&gt;&lt;/tr&gt;
				&lt;/table&gt;
			</section>
			<section type="example">
				ui.showLog();
				set i = 100 / 2 + 4 * -2;
				i++;
				set b = true || false;
				util.log("result : " .. i .. " and 1 or 0 : " .. b);
			</section>
			<section type="text" lang="en">&lt;br&gt;AL also support several constant values: true, false, nil, nan, infinity:&lt;br&gt;- true and false are the two boolean values&lt;br&gt;- nil represents null value&lt;br&gt;- nan for "not a number" (result of an unautorized operation)&lt;br&gt;- infinity for infinite number (use -infinity for negative one)</section>
			<section type="text" lang="fr">&lt;br&gt;AL supporte également plusieurs valeurs constantes : true, false, nil, nan, infinity :&lt;br&gt;- true et false sont les deux valeurs booléenne&lt;br&gt;- nil représente la valeur null&lt;br&gt;- nan signifie "not a number" (résultat d'une opération non autorisée)&lt;br&gt;- infinity représente un nombre infinit (utiliser -infinity pour la valeur négative)</section>
		</description>
	</structure>
	<structure keyword="statement" syntax="set ;">
		<description>
			<section type="text" lang="en">Statement declare a new variable in the current scope.&lt;br&gt;Declared variable can be used for future in the same scope.</section>
			<section type="text" lang="fr">Déclare une variable dans la portée courante.&lt;br&gt;Les variables déclarées peuvent être utilisées par la suite dans la même portée ou dans une portée imbriqué la la portée courante.</section>
			<section type="bnf">'set' ident [symbol expr] ';'</section>
			<section type="text" lang="en">symbol can be :</section>
			<section type="text" lang="fr">Les symboles sont les suivants :</section>
			<section type="text" lang="en">
			&lt;table class="standard"&gt;
				&lt;tr&gt;&lt;th&gt;symbol&lt;/th&gt;&lt;th&gt;description&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;=&lt;/td&gt;&lt;td&gt;equal i = n;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;+=&lt;/td&gt;&lt;td&gt;plus and equal, equivalent to i = i + n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-=&lt;/td&gt;&lt;td&gt;minus and equal, equivalent to i = i - n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;*=&lt;/td&gt;&lt;td&gt;multiply and equal, equivalent to i = i * n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;/=&lt;/td&gt;&lt;td&gt;divide and equal, equivalent to i = i / n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;%=&lt;/td&gt;&lt;td&gt;modulo and equal, equivalent to i = i % n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;..=&lt;/td&gt;&lt;td&gt;concatenate and equal (for string), equivalent to s = s .. t&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&gt;=&lt;/td&gt;&lt;td&gt;then and equal (for function), equivalent to f = f -&gt; g&lt;/td&gt;&lt;/tr&gt;
			&lt;/table&gt;
			</section>
			<section type="text" lang="fr">
			&lt;table class="standard"&gt;
				&lt;tr&gt;&lt;th&gt;symbole&lt;/th&gt;&lt;th&gt;déscription&lt;/th&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;=&lt;/td&gt;&lt;td&gt;égale i = n;&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;+=&lt;/td&gt;&lt;td&gt;plus égale, équivaut à i = i + n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-=&lt;/td&gt;&lt;td&gt;moins égale, équivaut à i = i - n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;*=&lt;/td&gt;&lt;td&gt;multiplie égale, équivaut à i = i * n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;/=&lt;/td&gt;&lt;td&gt;divise égale, équivaut à i = i / n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;%=&lt;/td&gt;&lt;td&gt;modulo égale, équivaut à i = i % n&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;..=&lt;/td&gt;&lt;td&gt;concatène égale (pour les strings), équivaut à s = s .. t&lt;/td&gt;&lt;/tr&gt;
				&lt;tr&gt;&lt;td&gt;-&gt;=&lt;/td&gt;&lt;td&gt;puis égale (pour les functions), équivaut à f = f -&gt; g&lt;/td&gt;&lt;/tr&gt;
			&lt;/table&gt;
			</section>
			<section type="text" lang="en">Statement is itself an expression.</section>
			<section type="text" lang="fr">La déclaration est elle même une expression.</section>
			<section type="example">
			ui.showLog();
			set i = 10;
			i += 20;
			util.log("result: " .. i);
			</section>
		</description>
	</structure>

	<primitive keyword="while" syntax="while () {\n};\n">
		<description>
			<section type="text" lang="en">While is the first control instruction. It loops while condition is true.</section>
			<section type="text" lang="fr">While est la première instruction impérative. Elle boucle tant que sa condition renvoie true (vrai).</section>
			<section type="bnf">'while' '(' condition ')' block</section>
			<section type="example">
			ui.showLog();
			set i = 10;
			while (i-- > 0) {
				util.log("result: " .. i);
			}
			</section>
		</description>
	</primitive>
	<primitive keyword="do" syntax="do {\n} until ()\n">
		<description>
			<section type="text" lang="en">Loop until condition become false. Condition is tester after execution.</section>
			<section type="text" lang="fr">Boucle jusqu'à ce que la condition renvoie false (faux).</section>
			<section type="bnf">'do' block  'until' '(' condition ')'</section>
			<section type="example">
			ui.showLog();
			set i = 10;
			do {
				util.log("result: " .. i);
			} until (i-- &lt;= 0)
			</section>
		</description>
	</primitive>
	<primitive keyword="loop" syntax="loop () {\n}\n">
		<description>
			<section type="text" lang="en">Loop repeats a block of code while limit is reached.</section>
			<section type="text" lang="fr">Boucle le nombre de fois indiqué par le paramètre limite.</section>
			<section type="bnf">'loop' (limit) block</section>
			<section type="example">
			ui.showLog();
			set a = 0;
			loop (10) {
				util.log("loop: " .. a);
				a++;
			}
			</section>
		</description>
	</primitive>
	<primitive keyword="for" syntax="for ( ; ; ) {\n}\n">
		<description>
			<section type="text" lang="en">For loop repeats a block of code while a control variable runs through an arithmetic progression.</section>
			<section type="text" lang="fr">La boucle for initialise une variable et répète le bloc d'instruction tant que la progression de la variable respecte la condition.</section>
			<section type="bnf">'for' ([initialization] ';' [condition] ';' [progression]) block</section>
			<section type="example">
			ui.showLog();
			for (set i = 0; i &lt; 10; i++) {
				util.log("loop: " .. i);
			}		  
			</section>
		</description>
	</primitive>
	<primitive keyword="if" syntax="if () {\n} else {\n}\n">
		<description>
			<section type="literal">&lt;a name="elseif"&gt;&lt;/a&gt;&lt;a name="else"&gt;&lt;/a&gt;&lt;a name="if elseif else"&gt;&lt;/a&gt;</section>
			<section type="text" lang="en">If execute the block if condition is true and else otherwise.&lt;br&gt;Elseif are executed if the other condition is true</section>
			<section type="text" lang="fr">IF exécute un bloc d'instruction si sa condition est true (vrai) sinon, c'est le bloc Else qui est exécuté.&lt;br&gt;Elseif exécuté si la condition précédente n'est pas true (vrai) et si la sienne l'est.</section>
			<section type="bnf">'if' '(' condition ')' block {['elseif' '(' condition ')' block]} ['else' block]</section>
			<section type="example">
			ui.showLog();
			for (set i = 0; i&lt;4; i++) {
				if (i == 0) {
					util.log("i is 0");
				} elseif (i == 1) {
					util.log("then 1");
				} else {
					util.log("then others");
				}
			}		  
			</section>
			<section type="text" lang="en">In AL language, IF is also an expression. It can be user to describe a conditional value.</section>
			<section type="text" lang="fr">En langage AL, IF est aussi un expression. Elle peut être utilisée pour décrire une valeur conditionnelle.</section>
			<section type="example">
			ui.showLog();
			set i = 0;
			set s = if (i==0) "zero" elseif (i == 1) "one" else "other";
			util.log ("if i=" .. i .. ", s=" .. s);
			</section>
		</description>
	</primitive>
	<primitive keyword="function" syntax="function () {\n}\n">
		<description>
			<section type="text" lang="en">Define a reusable and nested scoped part of code with parameters.&lt;br&gt;The particularity of AL it that functions are considered as data. Function is an expression, so function declaring can be terminated by a semicolon.</section>
			<section type="text" lang="fr">Définit un bloc d'instruction réutilisable dans une portée propre avec des paramètre en entrée et un paramètre de sortie.&lt;br&gt;La particularité d'AL, c'est que ses fonctions (ainsi que ses objets) sont considérés comme des valeurs. Ce sont des expressions et donc, peuvent se terminer par un point-virgule.</section>
			<section type="bnf">'function' ['(' [arg [{',' arg}]] ')'] '{' instruction '}'</section>
			<section type="example">
			set f = function (x) {
				ui.message("x parameter is " .. x);
			};
			f (10);		  
			</section>
		</description>
	</primitive>
	<primitive keyword="lambda" syntax="() {\n}\n">
		<description>
			<section type="text" lang="en">A lambda is a function with a simplified syntax. It can only been used as parameter of another function. And be designed to lighten the writing of functors in functional style.</section>
			<section type="text" lang="fr">Une expression lambda est une fonction avec une écriture simplifiée. Elle ne peut-être déclarée que comme paramètre d'une autre fonction. Elle a été créée pour simplifier l'écriture des foncteurs de la programmation fonctionnelle.</section>
			<section type="bnf">['(' [arg [{',' arg}]] ')'] '{' instruction '}'</section>
			<section type="example">
			util.pulse({
				algo.go(10);
			}, 50);
			</section>
		</description>
	</primitive>
	<primitive keyword="object" syntax="object () {\n}\n">
		<description>
			<section type="text" lang="en">Define a reusable scope composed of a set of attributes, methods and nested objects.&lt;br&gt;Statements can be : attributes (variable), methods (functions) and another nested object.</section>
			<section type="text" lang="fr">Définit un ensemble de déclarations réutilisables dans leur portée propre.&lt;br&gt;Les déclarations peuvent être : des attributs (variables), des méthodes (fonctions) et des objets imbriqués.</section>
			<section type="bnf">'object' '(' {parent {[ ',' parent ]}} ')' '{' declarations '}'</section>
			<section type="example">
			ui.showLog ();
			set o = object () {
				set a = 0;
				set b = "my b attribut";
			};
			util.log ("o.a = " .. o.a);
			util.log ("o.b = " .. o.b);
			</section>

			<section type="title" lang="en">methods</section>
			<section type="title" lang="fr">méthodes</section>
			<section type="text" lang="en">All functions declared into an object are called methods. Methods are the object set of behaviours.&lt;br&gt;
A method designed to access to an attribut is called accessor.&lt;br&gt;
A method designed to modify an attribute is called mutator.</section>
			<section type="text" lang="fr">Toute fonction déclarée dans un objet est appelé méthode. Les méthodes constituent les comportements de l'objet.&lt;br&gt;
Une méthode désignée pour accéder à un attribut est appelé un accesseur.&lt;br&gt;
Une méthode désignée pour modifier un attribut est appelé un mutateur.</section>
			<section type="example">
			set o = object () {
				set a = 0;
				// the a setter
				set setA = function(a) {
					this.a = a;
				};
				// the a getter
				set getA = function() {
					return this.a;
				};
				// a method
				set doubleA = function() {
					this.a = this.a * this.a;
				};
			
			};
			
			o.setA(2);
			ui.message("o.a parameter is " .. o.getA());
			o.doubleA();
			ui.message("and its double is " .. o.getA());		  
			</section>

			<section type="title" lang="en">constructors</section>
			<section type="title" lang="fr">constructeurs</section>
			<section type="text" lang="en">Objects can be duplicated and keeping their internal structure. It is called cloning object.&lt;br&gt;
In AL objects are created and can be cloned. It exists two maneers to clone; The new statement create a new duplicated object with same states and the clone method.&lt;br&gt;
This last one assign the parameters passed to her to the states of the new object.</section>
			<section type="text" lang="fr">Les objets peuvent être dupliqués en conservants la même structure interne. Cela s'appel cloner un objet.&lt;br&gt;
En AL les objets sont construits et peuvent être clonés. Il existe deux façons pour cloner; l'instruction new duplique l'objet et ses états actuels et la méthode clone.&lt;br&gt;
Cette dernière permet d'attribuer de nouvelles valeurs aux états de l'objet en les lui passant en paramètre.</section>
			<section type="example">
			ui.showLog();
			set o = object () {
				set a = 7;
				set b = "my attribute b";
				set toString = function () {
					return "o {a=" .. a .. ", b=" .. b .. "};"
				};
			};
			set p = o.clone (8, "another parameter");
			util.log (o);
			util.log (p);
			</section>

			<section type="title" lang="en">this</section>
			<section type="text" lang="en">This is a reference to the object himself.</section>
			<section type="text" lang="fr">This est une référence de l'objet à lui même.</section>
			<section type="example">
				ui.showLog();
			set o = object () {
				set a;
				set setA = function (a) {
					this.a = a;
				};
				set getA = function () {
					return this.a;
				};
			};
			o.setA (7);
			util.log (o.getA());
			</section>

			<section type="title">supers</section>
			<section type="text" lang="en">Supers[n] accesses to the list of super objects (multi-inheritance).</section>
			<section type="text" lang="fr">Supers[n] est un tableau qui permet d'accéder à la liste des super objets (héritage multiple).</section>
			<section type="example">
			set q = object() {
				set ret7 = function () {
					return 7;
				};
			};
			
			set p1 = object() {};
			
			set p2 = object(q) {};
			
			set o = object (p1, p2) {
				set test = function () {
					return this.supers[1].supers[0].ret7();
				};
			};
			
			ui.message("o.test result is " .. o.test());		  
			</section>
		</description>
	</primitive>
	<primitive keyword="array" syntax="array {\n}\n">
		<description>
			<section type="text" lang="en">Define a list of elements or a dictionary indexed by any expression.&lt;br&gt;
When defining nested arrays, the keyword 'array' is only required for the first level of the array (the root). It then becomes optional.</section>
			<section type="text" lang="fr">Définit un tableau d'éléments ou un dictionnaire (liste associative) indéxé par n'importe quelle expression.&lt;br&gt;
Lors de la définition de tableaux imbriqués, le mot clé 'array' n'est obligatoire que pour le premier tableau (le root). Il devient optionnel ensuite.</section>
			<section type="bnf">&lt;br&gt;item  : [ expr ':' ] expr&lt;br&gt;array : [ 'array' ]1 '{' item [{ ',' item }] '}'</section>
			<section type="example">
			ui.showLog();
			set a = array {7, 8, 9, 10, 11};
			for (set i=0; i &lt; a.length(); i++) {
				util.log("a[" .. i .. "] is " .. a[i]);
			}
			// or more elegent
			a.each (function (item, index) {
				util.log("a[" .. index .. "] is " .. item);
			});
			</section>
			<section type="text" lang="en">Array can already been used as a dictionary.&lt;br&gt;It keeps its list capabilities, but its values are accessible by a key expression :</section>
			<section type="text" lang="fr">Les tableaux peuvent être utilisés comme des tableaux associatifs.&lt;br&gt;Ils gardent leur comportement de tableau, mais leurs valeurs sont référencées par une expression clé :</section>
			<section type="example">
			ui.showLog();
			set a = array {"a" : 7, "b" : 8, "c" : 9, "d" : 10, "e" : 11};
			a.each (function (item, index, key) {
				util.log("a[" .. key .. "] is " .. item);
			});
			
			util.log ("Find a[c] = " .. a["c"]);
			</section>		  
		</description>
	</primitive>


	<!-- dynamic methods -->
	<reference keyword="type" package="type" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">In AL all variables inherits from type object. When any variable is declared, AL create a specific object that is also a type object. Type have some properties and methods that are common for all variables types.</section>
		<section type="text" lang="fr">En AL, toutes les variables héritent de l'objet type. Lorsqu'une variable est déclarée, AL créer un objet approprié qui est aussi un objet type. Type à des propriétés et des méthodes qui sont donc communes à tous les types de variables.</section>
	</description>
	</reference>
	<reference keyword="type.getType" package="type" function="getType" syntax="*.getType () " type="property" kind="dynamic" platform="both">
	<example>"Hi".getType();</example>
	<description>
		<section type="text" lang="en">Return the AL type of the data. For complete type reference see &lt;a href ="#al.types.VOID"&gt;AL Types&lt;/a&gt;.</section>
		<section type="text" lang="fr">Renvoie le type AL de la donnée. Voir &lt;a href ="#al.types.VOID"&gt;Types AL&lt;/a&gt; pour la référence complète.</section>
	</description>
	</reference>
	<reference keyword="type.is" package="type" function="is" syntax="*.is (type) " type="property" kind="dynamic" platform="both">
	<example>"Hi".is(al.types.STRING);</example>
	<description>
		<section type="text" lang="en">Verifies that the data is of the type specified as the parameter. For complete type reference see &lt;a href ="#al.types.VOID"&gt;AL Types&lt;/a&gt;.</section>
		<section type="text" lang="fr">Vérifie que la donnée soit du type indiqué comme paramètre. Voir &lt;a href ="#al.types.VOID"&gt;Types AL&lt;/a&gt; pour la référence complète.</section>
	</description>
	</reference>
	<reference keyword="type.isNull" package="type" function="isNull" syntax="*.isNull () " type="property" kind="dynamic" platform="both">
	<example>set a;a.isNull();</example>
	<description>
		<section type="text" lang="en">Verify if variable is VOID (is equals to nil).</section>
		<section type="text" lang="fr">Vérifie si le type de la variable est VOID (égale à nil).</section>
	</description>
	</reference>
	<reference keyword="type.ifNull" package="type" function="ifNull" syntax="*.ifNull (value) " type="property" kind="dynamic" platform="both">
	<example>set a;a.ifNull(7);</example>
	<description>
		<section type="text" lang="en">Verify if variable is VOID (is equals to nil). In this case the function return the value in parameter.</section>
		<section type="text" lang="fr">Vérifie si le type de la variable est VOID (égale à nil). Si tel est le cas, la fonction retourne la valeur en paramètre.</section>
	</description>
	</reference>

	<reference keyword="type.ifNotBreak" package="type" function="ifNotBreak" syntax="*.ifNotBreak (type) " type="property" kind="dynamic" platform="both">
	<example>set a;a.ifNotBreak(al.types.NUMBER).add(7);</example>
	<description>
		<section type="text" lang="en">Verify if variable is not of the type specified as the parameter. In this case the function return nil and break call chain. For complete type reference see &lt;a href ="#al.types.VOID"&gt;AL Types&lt;/a&gt;.</section>
		<section type="text" lang="fr">Vérifie que la donnée soit du type indiqué comme paramètre. Si tel n'est pas le cas, la fonction renvoie nil et termine la chaîne d'appel de fonctions. Voir &lt;a href ="#al.types.VOID"&gt;Types AL&lt;/a&gt; pour la référence complète.</section>
	</description>
	</reference>
	<reference keyword="type.ifNullBreak" package="type" function="ifNullBreak" syntax="*.ifNullBreak () " type="property" kind="dynamic" platform="both">
	<example>set a;a.ifNullBreak().add(7);</example>
	<description>
		<section type="text" lang="en">Verify if variable is VOID (is equals to nil). In this case the function return nil and break call chain.</section>
		<section type="text" lang="fr">Vérifie si le type de la variable est VOID (égale à nil). Si tel est le cas, la fonction retourne la valeur en paramètre.</section>
	</description>
	</reference>

	<reference keyword="type.equals" package="type" function="equals" syntax="*.equals (b) " type="property" kind="dynamic" platform="both">
	<example>set a = "algoid".equals("android");</example>
	<description>
		<section type="text" lang="en">Test if boolean is equals to b.</section>
		<section type="text" lang="fr">Vérifie si boolean est égale à b.</section>
	</description>
	</reference>
	<reference keyword="type.toString" package="type" function="toString" syntax="*.toString () " type="property" kind="dynamic" platform="both">
	<example>array {7, 8, object {}, function () {}}.toString();</example>
	<description>
		<section type="text" lang="en">Return the data value as String. In case of complexe data type (like array, function and object), return the set of data of the type as String.</section>
		<section type="text" lang="fr">Renvoie l'expression de la donné sous forme de texte. Dans le cas d'un type complexe (comme array, function ou object), renvoie l'ensemble des valeurs du type sous forme de texte.</section>
	</description>
	</reference>
	<reference keyword="type.add" package="type" function="add" syntax="*.add (item [, index]) " type="method" kind="dynamic" platform="both">
	<example>set a = 1;a.add(2);</example>
	<description>
		<section type="text" lang="en">Index is optional.&lt;br&gt;If index is not setted, it create an array with value at first position and add item at its end.&lt;br&gt;&#13;
		Else, it create the array and add item at the index position on it.</section>
		<section type="text" lang="fr">Index est un paramètre optionnel.&lt;br&gt;Si index est absent, il crée un tableau avec la valeur en première position et y ajoute un élément à sa fin.&lt;br&gt;&#13;
		Sinon, il crée le tableau et ajoute l'élément à la position indiquée.</section>
	</description>
	</reference>
	<reference keyword="type.addAll" package="type" function="addAll" syntax="*.addAll (array [, index]) " type="method" kind="dynamic" platform="both">
	<example>set a = 1;a.addAll(array {2, 3, 4});</example>
	<description>
		<section type="text" lang="en">Index is optional.&lt;br&gt;If index is not setted, create an array with value at first position and add items at the end of the array.&lt;br&gt;&#13;
		Else, it create the array and add items at the index position on it.</section>
		<section type="text" lang="fr">Index est un paramètre optionnel.&lt;br&gt;Si index est absent, il crée un tableau avec la valeur en première position et y ajoute tous les éléments à la fin.&lt;br&gt;&#13;
		Sinon, il crée le tableau et ajoute les éléments à la position indiquée.</section>
	</description>
	</reference>
	<reference keyword="type.onChanged" package="type" function="onChanged" syntax="*.onChanged ( function(value){} ) " type="event" kind="dynamic" platform="both">
	<example>set a;a.onChanged ( (v) { print(v) } );</example>
	<description>
		<section type="text" lang="en">An event raised every time a variable is modified in program.</section>
		<section type="text" lang="fr">Un évènement qui se lève chaque fois que la valeur est modifiée dans le programme.</section>
	</description>
	</reference>  
	<reference keyword="void" package="void" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When variable is declared and nothing is setted on it, AL create a VOID object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.</section>
		<section type="text" lang="fr">Quand une variable sans valeur est déclaré, AL créer un objet VOID. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.</section>
	</description>
	</reference>
	<reference keyword="boolean" package="boolean" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When an boolean is declared, AL create an object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.</section>
		<section type="text" lang="fr">Quand un booléen est déclaré, AL créer un objet. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.</section>
	</description>
	</reference>
	<reference keyword="boolean.not" package="boolean" function="not" syntax="boolean.not () " type="property" kind="dynamic" platform="both">
	<example>set a = true.not();</example>
	<description>
		<section type="text" lang="en">Return the inverted boolean value.</section>
		<section type="text" lang="fr">Retourne la valeur inverse du booléen.</section>
	</description>
	</reference>
	<reference keyword="boolean.and" package="boolean" function="and" syntax="boolean.and (b) " type="property" kind="dynamic" platform="both">
	<example>set a = true.and(true);</example>
	<description>
		<section type="text" lang="en">Return the boolean &amp;&amp; b operation result.</section>
		<section type="text" lang="fr">Retourne le résultat de l'opération boolean &amp;&amp; b.</section>
	</description>
	</reference>
	<reference keyword="boolean.or" package="boolean" function="or" syntax="boolean.or (b) " type="property" kind="dynamic" platform="both">
	<example>set a = true.or(true);</example>
	<description>
		<section type="text" lang="en">Return the boolean || b operation result.</section>
		<section type="text" lang="fr">Retourne le résultat de l'opération boolean || b.</section>
	</description>
	</reference>
	<reference keyword="boolean.xor" package="boolean" function="xor" syntax="boolean.xor (b) " type="property" kind="dynamic" platform="both">
	<example>set a = true.xor(true);</example>
	<description>
		<section type="text" lang="en">Return the (boolean || !b) &amp;&amp; (!boolean || b) operation result. In other words boolean != b.</section>
		<section type="text" lang="fr">Retourne le résultat de l'opération (boolean || !b) &amp;&amp; (!boolean || b). En d'autres termes, boolean différent de b</section>
	</description>
	</reference>
	<reference keyword="boolean.ifTrue" package="boolean" function="ifTrue" syntax="boolean.ifTrue (function () {}) " type="property" kind="dynamic" platform="both">
	<example>true.ifTrue(function () {/* Do something */});</example>
	<description>
		<section type="text" lang="en">Execute the parameter function if boolean value is true.&lt;br&gt;It it the functional equivalent of If imperative statement.</section>
		<section type="text" lang="fr">Execute la fonction en paramètre is la valeur boolééene est vrai.&lt;br&gt;Equivalent fonctionel de l'instruction If.</section>
	</description>
	</reference>
	<reference keyword="boolean.ifFalse" package="boolean" function="ifFalse" syntax="boolean.ifFalse (function () {}) " type="property" kind="dynamic" platform="both">
	<example>false.ifFalse(function () {/* Do something */});</example>
	<description>
		<section type="text" lang="en">Execute the parameter function if boolean value is false.&lt;br&gt;It it the functional equivalent of Else imperative statement.</section>
		<section type="text" lang="fr">Execute la fonction en paramètre is la valeur boolééene est fausse.&lt;br&gt;Equivalent fonctionel de l'instruction Else.</section>
	</description>
	</reference>
	<reference keyword="boolean.whileDo" package="boolean" function="whileDo" syntax="boolean.whileDo (function () {}) " type="property" kind="dynamic" platform="both">
	<example>set a = 0; (a &lt; 8).whileDo(function () {a++;});</example>
	<description>
		<section type="text" lang="en">Execute the parameter function while function return true.&lt;br&gt;It it the functional equivalent of While imperative statement.</section>
		<section type="text" lang="fr">Execute la fonction en paramètre tant que la valeur boolééene est vrai.&lt;br&gt;Equivalent fonctionel de l'instruction While.</section>
	</description>
	</reference>
	<reference keyword="boolean.untilDo" package="boolean" function="untilDo" syntax="boolean.untilDo (function () {}) " type="property" kind="dynamic" platform="both">
	<example>set a = 0; (a &gt;= 8).untilDo(function () {a++;});</example>
	<description>
		<section type="text" lang="en">Execute the parameter function while function return true.&lt;br&gt;It it the functional equivalent of While imperative statement.</section>
		<section type="text" lang="fr">Execute la fonction en paramètre tant que la valeur boolééene est vrai.&lt;br&gt;Equivalent fonctionel de l'instruction While.</section>
	</description>
	</reference>
	<reference keyword="number" package="number" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When an number is declared, AL create an object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.&lt;br&gt;&lt;b&gt;Be carefull, parenthesis must be employed with this type because dot is used for decimal.&lt;/b&gt;&lt;br&gt;ex : (7).isNumber();</section>
		<section type="text" lang="fr">Quand un nombre est déclaré, AL créer un objet. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.&lt;br&gt;&lt;b&gt;Attention, les parenthèses doivent être employés avec ce type parce que le point est réservé aux décimales.&lt;/b&gt; ex : (7).isNumber();</section>
	</description>
	</reference>
	<reference keyword="number.isInteger" package="number" function="isInteger" syntax="number.isInteger () " type="property" kind="dynamic" platform="both">
	<example>set a = 8.7;a.isInteger();</example>
	<description>
		<section type="text" lang="en">Verify if variable type is NUMBER and integer.</section>
		<section type="text" lang="fr">Vérifie si le type de la variable est de type NUMBER et entière.</section>
	</description>
	</reference>
	<reference keyword="number.isReal" package="number" function="isReal" syntax="number.isReal () " type="property" kind="dynamic" platform="both">
	<example>set a = 8.7;a.isReal();</example>
	<description>
		<section type="text" lang="en">Verify if variable type is NUMBER and real.</section>
		<section type="text" lang="fr">Vérifie si le type de la variable est de type NUMBER et réel.</section>
	</description>
	</reference>
	<reference keyword="number.isNan" package="number" function="isNan" syntax="number.isNan () " type="property" kind="dynamic" platform="both">
	<example>set a = 0 / 0;a.isNan();</example>
	<description>
		<section type="text" lang="en">Verify if value is Not a number, e.g. if the result of the operation is invalid.</section>
		<section type="text" lang="fr">Vérifie si la valeur n'est pas un nombre, càd si le résultat de l'opération est invalide.</section>
	</description>
	</reference>
	<reference keyword="number.isInfinite" package="number" function="isInfinite" syntax="number.isInfinite () " type="property" kind="dynamic" platform="both">
	<example>set a = 1 / 0;a.isInfinite();</example>
	<description>
		<section type="text" lang="en">Verify if the value is infinite.</section>
		<section type="text" lang="fr">Vérifie si la valeur est infinie.</section>
	</description>
	</reference>
	<reference keyword="number.toInteger" package="number" function="toInteger" syntax="number.toInteger () " type="method" kind="dynamic" platform="both">
	<example>set a = (7,8).toInteger();</example>
	<description>
		<section type="text" lang="en">Return the integer value of the number.</section>
		<section type="text" lang="fr">Retourne la valeur entière du nombre.</section>
	</description>
	</reference>
	<reference keyword="number.minus" package="number" function="minus" syntax="number.minus () " type="method" kind="dynamic" platform="both">
	<example>set a = (7).minus();</example>
	<description>
		<section type="text" lang="en">Return the inverted number value, same as -n.</section>
		<section type="text" lang="fr">Retourne la valeur inverse du nombre, équivalant de -n.</section>
	</description>
	</reference>
	<reference keyword="number.increment" package="number" function="increment" syntax="number.increment ([n]) " type="method" kind="dynamic" platform="both">
	<example>set a = (7).increment();</example>
	<description>
		<section type="text" lang="en">Return the incremented number value, same as number + n. If n is not setted it is equal to 1.</section>
		<section type="text" lang="fr">Retourne le nombre incrémenté, Équivalant de number + n. Si n n'est pas paramétré, il est égale à 1</section>
	</description>
	</reference>
	<reference keyword="number.decrement" package="number" function="decrement" syntax="number.decrement () " type="method" kind="dynamic" platform="both">
	<example>set a = (8).decrement();</example>
	<description>
		<section type="text" lang="en">Return the decremented number value, same as number + n. If n is not setted it is equal to 1.</section>
		<section type="text" lang="fr">Retourne le nombre décrémenté, Équivalant de number + n. Si n n'est pas paramétré, il est égale à 1</section>
	</description>
	</reference>
	<reference keyword="number.addition" package="number" function="addition" syntax="number.addition (n) " type="method" kind="dynamic" platform="both">
	<example>set a = (7).addition(1);</example>
	<description>
		<section type="text" lang="en">Is the number + n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number + n.</section>
	</description>
	</reference>
	<reference keyword="number.substract" package="number" function="substract" syntax="number.substract (n) " type="method" kind="dynamic" platform="both">
	<example>set a = (8).substract(1);</example>
	<description>
		<section type="text" lang="en">Is the number - n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number - n.</section>
	</description>
	</reference>
	<reference keyword="number.multiply" package="number" function="multiply" syntax="number.multiply (n) " type="method" kind="dynamic" platform="both">
	<example>set a = (7).multiply(2);</example>
	<description>
		<section type="text" lang="en">Is the number * n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number * n.</section>
	</description>
	</reference>
	<reference keyword="number.divide" package="number" function="divide" syntax="number.divide (n) " type="method" kind="dynamic" platform="both">
	<example>set a = (8).divide(2);</example>
	<description>
		<section type="text" lang="en">Is the number / n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number / n.</section>
	</description>
	</reference>
	<reference keyword="number.modulo" package="number" function="modulo" syntax="number.modulo (n) " type="method" kind="dynamic" platform="both">
	<example>set a = (8).modulo(2);</example>
	<description>
		<section type="text" lang="en">Is the number % n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number % n.</section>
	</description>
	</reference>
	<reference keyword="number.limit" package="number" function="limit" syntax="number.limit (min, max) " type="method" kind="dynamic" platform="both">
	<example>set a = 7; a.limit(0, 5);</example>
	<description>
		<section type="text" lang="en">Limit the value between minimum and maximum.</section>
		<section type="text" lang="fr">Encadre la valeur entre le minimum et le maximum.</section>
	</description>
	</reference>
	<reference keyword="number.greaterThan" package="number" function="greaterThan" syntax="number.greaterThan (n) " type="method" kind="dynamic" platform="both">
	<example>set b = (8).greaterThan(2);</example>
	<description>
		<section type="text" lang="en">Is number &gt; n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number &gt; n.</section>
	</description>
	</reference>
	<reference keyword="number.smallerThan" package="number" function="smallerThan" syntax="number.smallerThan (n) " type="method" kind="dynamic" platform="both">
	<example>set b = (2).smallerThan(8);</example>
	<description>
		<section type="text" lang="en">Is number &lt; n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number &lt; n.</section>
	</description>
	</reference>
	<reference keyword="number.greaterOrEquals" package="number" function="greaterOrEquals" syntax="number.greaterOrEquals (n) " type="method" kind="dynamic" platform="both">
	<example>set b = (8).greaterOrEquals(2);</example>
	<description>
		<section type="text" lang="en">Is number &gt;= n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number &gt;= n.</section>
	</description>
	</reference>
	<reference keyword="number.smallerOrEquals" package="number" function="smallerOrEquals" syntax="number.smallerOrEquals (n) " type="method" kind="dynamic" platform="both">
	<example>set b = (2).smallerOrEquals(8);</example>
	<description>
		<section type="text" lang="en">Is number &lt;= n operation equivalent.</section>
		<section type="text" lang="fr">Equivaut à l'opération number &lt;= n.</section>
	</description>
	</reference>
	<reference keyword="number.between" package="number" function="between" syntax="number.between (min, max) " type="method" kind="dynamic" platform="both">
	<example>set b = (2).between(1, 9);</example>
	<description>
		<section type="text" lang="en">Return true if number if between min and max. It is equivalent to number &gt;= min &amp;&amp; number &lt;= max.</section>
		<section type="text" lang="fr">Retourne vrai si number est entre min et max. C'est l'Équivalant de number &gt;= min &amp;&amp; number &lt;= max.</section>
	</description>
	</reference>
	<reference keyword="number.decodePoint" package="number" function="decodePoint" syntax="number.decodePoint () " type="method" kind="dynamic" platform="both">
	<example>set d = (95).decodePoint();</example>
	<description>
		<section type="text" lang="en">Return the character corresponding to codepoint codes.</section>
		<section type="text" lang="fr">Renvoie le caractère correspondant au code codepoint.</section>
	</description>
	</reference>
	<reference keyword="number.loopFor" package="number" function="loopFor" syntax="number.loopFor (function (index) {} [, init, [, increment]]) " type="method" kind="dynamic" platform="both">
	<example>set b = (8).loopFor(function (index) {}, 2);</example>
	<description>
		<section type="text" lang="en">Is the for (set index = init; index &lt; number; index += increment) imperarive instruction equivalent. Execute the function from 0 (or optional init) to number by adding 1 (or optional increment) each time.</section>
		<section type="text" lang="fr">Equivaut à l'instruction impérative for (set index = init; index &lt; number; index += increment). Exécute la fonction depuis 0 (ou init, optionel) jusqu'au nombre en incrémentant de 1 (ou increment, optionel) chaque fois.</section>
	</description>
	</reference>
	<reference keyword="string" package="string" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When a string is used, AL create a STRING object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.</section>
		<section type="text" lang="fr">Quand une chaîne de caractère est utilisée, AL créer un objet STRING. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.</section>
	</description>
	</reference>
	<reference keyword="string.isEmpty" package="string" function="isEmpty" syntax="string.isEmpty () " type="property" kind="dynamic" platform="both">
	<example>set a = ""; a.isEmpty();</example>
	<description>
		<section type="text" lang="en">Verify if string is empty ("").</section>
		<section type="text" lang="fr">Vérifie si la chaîne est vide ("").</section>
	</description>
	</reference>
	<reference keyword="string.length" package="string" function="length" syntax="string.length () " type="property" kind="dynamic" platform="both">
	<example>set s = "abcdefg".length();</example>
	<description>
		<section type="text" lang="en">Return the number of characters of the string.</section>
		<section type="text" lang="fr">Retourne le nombre de caractères de la chaîne.</section>
	</description>
	</reference>
	<reference keyword="string.getChar" package="string" function="getChar" syntax="string.getChar (index) " type="property" kind="dynamic" platform="both">
	<example>set s = "abcdefghi".getChar(7);</example>
	<description>
		<section type="text" lang="en">Return the character at the index position in the string.</section>
		<section type="text" lang="fr">Retourne le caractère à la position index dans la chaîne.</section>
	</description>
	</reference>
	<reference keyword="string.contains" package="string" function="contains" syntax="string.contains (subString) " type="method" kind="dynamic" platform="both">
	<example>set a = "acb";a.contains("cd");</example>
	<description>
		<section type="text" lang="en">Return true if string contains the sub string</section>
		<section type="text" lang="fr">Retourne vrai si la chaine contiens la sous-chaine.</section>
	</description>
	</reference>
	<reference keyword="string.concat" package="string" function="concat" syntax="string.concat (string) " type="method" kind="dynamic" platform="both">
	<example>"abc".concat("cdef");</example>
	<description>
		<section type="text" lang="en">Concatenate string with the other one.</section>
		<section type="text" lang="fr">Concatène la chaîne de caractères avec celle en paramètre.</section>
	</description>
	</reference>
	<reference keyword="string.indexOf" package="string" function="indexOf" syntax="string.indexOf (subString, index) " type="method" kind="dynamic" platform="both">
	<example>set a = "acb";a.indexOf("cd");</example>
	<description>
		<section type="text" lang="en">Return the position of sub string in string.&lt;br&gt;Index is optional and indicate at what position it begin to search.</section>
		<section type="text" lang="fr">Retourne la position de la sous-chaîne contenue dans la chaîne.&lt;br&gt;Index est optionnel et indique à quelle position la recherche est commencé.</section>
	</description>
	</reference>
	<reference keyword="string.count" package="string" function="count" syntax="string.count (subString) " type="method" kind="dynamic" platform="both">
	<example>set a = "aldoid is algois!";a.count("algoid");</example>
	<description>
		<section type="text" lang="en">Return the number of sub string present in string.</section>
		<section type="text" lang="fr">Retourne le nombre de sous chaîne trouvés dans la chaîne.</section>
	</description>
	</reference>
	<reference keyword="string.upper" package="string" function="upper" syntax="string.upper () " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I Am Algoid!".upper();</example>
	<description>
		<section type="text" lang="en">Return the upper representation of the string.</section>
		<section type="text" lang="fr">Retourne l'équivalent en majuscule de la chaîne.</section>
	</description>
	</reference>
	<reference keyword="string.lower" package="string" function="lower" syntax="string.lower () " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I Am Algoid!".lower();</example>
	<description>
		<section type="text" lang="en">Return the lower representation of the string.</section>
		<section type="text" lang="fr">Retourne l'équivalent en minuscule de la chaîne.</section>
	</description>
	</reference>
	<reference keyword="string.append" package="string" function="append" syntax="string.append (substring [, index]) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am".append(" algoid!");</example>
	<description>
		<section type="text" lang="en">Return result of string concatening.&lt;br&gt;Index is optional and specify the position to insert in the string.&lt;br&gt;Equivalent of ".." operator.</section>
		<section type="text" lang="fr">Retourne le résultat de la concaténation entre la chaîne et la sous-chaîne.&lt;br&gt;Index est optionnel et spécifie la position où la sous-chaîne doit être insérée.&lt;br&gt;Équivalant de l'opérateur ".."</section>
	</description>
	</reference>
	<reference keyword="string.appendSep" package="string" function="appendSep" syntax="string.appendSep (substring , separator) " type="method" kind="dynamic" platform="both">
	<example>set a = "item1".append("item2", ", ");</example>
	<description>
		<section type="text" lang="en">Return result of string concatening and separator if string was not empty.</section>
		<section type="text" lang="fr">Retourne le résultat de la concaténation entre la chaîne et la sous-chaîne précédée d'un séparateur si elle n'était pas vide.</section>
	</description>
	</reference>
	<reference keyword="string.subString" package="string" function="subString" syntax="string.subString (begin [, end]) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am algoid!".subString(9);</example>
	<description>
		<section type="text" lang="en">Get the substring between begin and end position in string.&lt;br&gt;End is optional, if setted indicate the position of the end of sub-string, else, the end is the end of the string.</section>
		<section type="text" lang="fr">Renvoie la coupe de la chaîne en une sous-chaîne entre le début et la fin.&lt;br&gt;End, le paramètre de fin est optionnel. Il indique la fin de la sous-chaîne, s'il n'est pas indiqué, alors c'est la fin de la chaîne qui est prise.</section>
	</description>
	</reference>
	<reference keyword="string.subStringOf" package="string" function="subStringOf" syntax="string.subStringOf (begin [, end]) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am algoid!".subStringOf("am ");</example>
	<description>
		<section type="text" lang="en">Get the substring between begin and end sub string in string.&lt;br&gt;End is optional.</section>
		<section type="text" lang="fr">Renvoie la coupe de la chaîne en une sous-chaîne entre les sous-chaîne de début et de fin.&lt;br&gt;End est optionnel.</section>
	</description>
	</reference>
	<reference keyword="string.replace" package="string" function="replace" syntax="string.replace (from, to) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am Algoid !".replace("Algoid", "Android");</example>
	<description>
		<section type="text" lang="en">Return string that sub string has been replaced by the second sub-string.</section>
		<section type="text" lang="fr">Renvoie la chaîne dont la sous-chaîne from a été remplacé par la sous-chaîne to.</section>
	</description>
	</reference>
	<reference keyword="string.replaceAt" package="string" function="replaceAt" syntax="string.replaceAt (subString, index) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am Algoid !".replaceAt(8, "Android");</example>
	<description>
		<section type="text" lang="en">Return string that the sub string has been replaced at index position in the string.</section>
		<section type="text" lang="fr">Renvoie la chaîne dont la sous-chaîne a été remplacé à la position index.</section>
	</description>
	</reference>
	<reference keyword="string.remove" package="string" function="remove" syntax="string.remove (index [, length]) " type="method" kind="dynamic" platform="both">
	<example>set a = "acb";a.remove(1, 2);</example>
	<description>
		<section type="text" lang="en">Return string that the char at position has been removed.&lt;br&gt;Length is optional, if setted, remove the number of char indicated.</section>
		<section type="text" lang="fr">Renvoie la chaîne dont le caractère à la position à été remplacé.&lt;br&gt;Length est optionnel, if assigné il indique le nombre de caractère à supprimer.</section>
	</description>
	</reference>
	<reference keyword="string.split" package="string" function="split" syntax="string.split (separator) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am Algoid !".split(" ");</example>
	<description>
		<section type="text" lang="en">Split the string according the specified separator and store results in an array.&lt;br&gt;Use "" separator to convert a string to an array of characters.</section>
		<section type="text" lang="fr">Divise la chaîne de caractère en un tableau de chaînes selon le séparateur choisi.&lt;br&gt;Utiliser le séparateur "" pour convertir une chaîne en tableau de caractères.</section>
	</description>
	</reference>
	<reference keyword="string.splitAt" package="string" function="splitAt" syntax="string.splitAt (array) " type="method" kind="dynamic" platform="both">
	<example>set a = "Hi I am Algoid !".splitAt(array {3, 5, 8});</example>
	<description>
		<section type="text" lang="en">Split the string according the specified ids (contained in the array) and store results in an array.</section>
		<section type="text" lang="fr">Divise la chaîne de caractère en un tableau de chaînes selon les indexes spécifiés dans le tableau (array) choisi.</section>
	</description>
	</reference>
	<reference keyword="string.trim" package="string" function="trim" syntax="string.trim () " type="method" kind="dynamic" platform="both">
	<example>set s = "   Hi I am Algoid !    ".trim();</example>
	<description>
		<section type="text" lang="en">Return the string that unused spaces has been removed at the beginning and the end of the string.</section>
		<section type="text" lang="fr">Renvoie la chaîne dont les éspaces inutiles au début et à la fin de la chaîne ont été supprimés.</section>
	</description>
	</reference>
	<reference keyword="string.create" package="string" function="create" syntax="string.create (subString, count) " type="method" kind="dynamic" platform="both">
	<example>set s = "".create(" ", 7);</example>
	<description>
		<section type="text" lang="en">Create a string by duplicating sub string from 0 to count time.</section>
		<section type="text" lang="fr">Créer une chaîne en dupliquant une sous-chaine de 0 à "count" fois.</section>
	</description>
	</reference>
	<reference keyword="string.encodePoint" package="string" function="encodePoint" syntax="string.encodePoint () " type="method" kind="dynamic" platform="both">
	<example>set a = "algoid".encodePoint();</example>
	<description>
		<section type="text" lang="en">Create an array that contains String caracters as codepoint codes.</section>
		<section type="text" lang="fr">Créer un tableau dont les valeurs sont les codespoints unicode de la chaîne.</section>
	</description>
	</reference>
	<reference keyword="string.each" package="string" function="each" syntax="string.each (function (char [, index]) {} [, step]) " type="functional method" kind="dynamic" platform="both">
	<example>set a = "Hi I am Algoid !".each(function (item) {util.log (item);});</example>
	<description>
		<section type="text" lang="en">Loop on all character of the string.&lt;br&gt;Executed function must define one parameter to retreive the current character of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the character index in the string.Step is optional, it represent the number of character to jump before next call.</section>
		<section type="text" lang="fr">Itère sur tous les caractères de la chaîne.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer le caractère à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position du caractère dans la chaîne.Step est optionnel, il représente le nombre de caractère à sauter avant la prochaine itération.</section>
	</description>
	</reference>
	<reference keyword="array" package="array" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When an array is declared, AL create an object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.</section>
		<section type="text" lang="fr">Quand un tableau est déclaré, AL créer un objet. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.</section>
	</description>
	</reference>
	<reference keyword="array.isEmpty" package="array" function="isEmpty" syntax="array.isEmpty () " type="property" kind="dynamic" platform="both">
	<example>set a = array {}; a.isEmpty();</example>
	<description>
		<section type="text" lang="en">Verify if array is empty ({}).</section>
		<section type="text" lang="fr">Vérifie si le tableau est vide ({}).</section>
	</description>
	</reference>
	<reference keyword="array.length" package="array" function="length" syntax="array.length () " type="property" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.length(5);</example>
	<description>
		<section type="text" lang="en">Return the number of element of the array.</section>
		<section type="text" lang="fr">Retourne le nombre d'éléments du tableau.</section>
	</description>
	</reference>
	<reference keyword="array.getItem" package="array" function="getItem" syntax="array.getItem (identity) " type="property" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.getItem(1);</example>
	<description>
		<section type="text" lang="en">Get the array item at identity.&lt;br&gt;Identity should be the position of the item or it's key.</section>
		<section type="text" lang="fr">Obtient l\élément du tableau à la position indiquée par identity.&lt;br&gt;Identity peu-t-être la position ou la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.setItem" package="array" function="setItem" syntax="array.setItem (identity, item) " type="property" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.setItem(1, 5);</example>
	<description>
		<section type="text" lang="en">Set the value of the array item at identity.&lt;br&gt;Identity should be the position of the item or it's key.</section>
		<section type="text" lang="fr">Définit la valeur du tableau à la position indiquée par identity.&lt;br&gt;Identity peu-t-être la position ou la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.getFirst" package="array" function="getFirst" syntax="array.getFirst () " type="property" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.getFirst();</example>
	<description>
		<section type="text" lang="en">Get the first item of the array.</section>
		<section type="text" lang="fr">Obtient le premier élément du tableau.</section>
	</description>
	</reference>
	<reference keyword="array.getLast" package="array" function="getLast" syntax="array.getLast () " type="property" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.getLast();</example>
	<description>
		<section type="text" lang="en">Get the last item of the array.</section>
		<section type="text" lang="fr">Obtient le dernier élément du tableau.</section>
	</description>
	</reference>
	<reference keyword="array.clone" package="array" function="clone" syntax="array.clone () " type="prototype" kind="dynamic" platform="both">
	<example>set a = {1, 2, 3, 4};set b = a.clone();</example>
	<description>
		<section type="text" lang="en">Duplicate the array to another new one.&lt;br&gt;Every modifications of the clone does not affect the original object.</section>
		<section type="text" lang="fr">Duplique le tableau vers un nouveau.&lt;br&gt;Chaque modification faite à un clone n'affecte pas l'objet original.</section>
	</description>
	</reference>
	<reference keyword="array.clear" package="array" function="clear" syntax="array.clear () " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4};a.clear();</example>
	<description>
		<section type="text" lang="en">Remove all items of array.</section>
		<section type="text" lang="fr">Enlève tous les éléments du tableau.</section>
	</description>
	</reference>
	<reference keyword="array.contains" package="array" function="contains" syntax="array.contains (item) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4};a.contains(2);</example>
	<description>
		<section type="text" lang="en">Test if the item is contained by the array.</section>
		<section type="text" lang="fr">Teste si l'élément est contenu par le tableau.</section>
	</description>
	</reference>
	<reference keyword="array.containsAll" package="array" function="containsAll" syntax="array.containsAll (array) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4};a.containsAll(array {1, 2});</example>
	<description>
		<section type="text" lang="en">Test if all the items of the subset are contained by the array.</section>
		<section type="text" lang="fr">Teste si tous les éléments du sous ensemble sont contenus par le tableau.</section>
	</description>
	</reference>
	<reference keyword="array.containsAny" package="array" function="containsAny" syntax="array.containsAny (array) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4};a.containsAny(2, 7);</example>
	<description>
		<section type="text" lang="en">Test if at least one of the items of the subset is contained by the array.</section>
		<section type="text" lang="fr">Teste si au moins un des éléments du sous ensemble est contenu par le tableau.</section>
	</description>
	</reference>
	<reference keyword="array.remove" package="array" function="remove" syntax="array.remove (identity) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3};a.remove(1);</example>
	<description>
		<section type="text" lang="en">Remove item from the array at identity position.&lt;br&gt;Identity should be the position of the item or it's key.</section>
		<section type="text" lang="fr">Supprime un élément du tableau à la position de identity.&lt;br&gt;Identity peu-t-être la position ou la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.pop" package="array" function="pop" syntax="array.pop ([identity]) " type="method" kind="dynamic" platform="both">
	<example>set a;a.add(1);a.pop();</example>
	<description>
		<section type="text" lang="en">Identity is optional and should be the position of the item or it's key.&lt;br&gt;If identity is not setted, remove the last item from the array and return it.&lt;br&gt;&#13;
		If identity is setted, remove the item at positin and return it.&lt;br&gt;&#13;
		Use array.add() and array.pop() to have LiFo (Last in First out) stack behaviours.&lt;br&gt;&#13;
		Use array.add() and array.pop(&lt;b&gt;0&lt;/b&gt;) to have FiFo (First in First out) queue behaviours.</section>
		<section type="text" lang="fr">Identity est un paramètre optionnel, il peu-t-être la position ou la clé de l'élément.&lt;br&gt;Si identity est absent, retourne le dernier élément du tableau et le supprime.&lt;br&gt;&#13;
		Si identity est spécifié, retourne l'élément à la position et le supprime du tableau.&lt;br&gt;&#13;
		Utiliser array.add() et array.pop() pour avoir un comportement de pile LiFo (Last in First out, ou en français DEPS Dernier entré Premier sortie).&#13;
		Utiliser array.add() et array.pop(&lt;b&gt;0&lt;/b&gt;) pour avoir un comportement de file FiFo (First in First out, ou en français PEPS Premier entré Premier sortie)</section>
	</description>
	</reference>
	<reference keyword="array.indexOf" package="array" function="indexOf" syntax="array.indexOf (item) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4};a.indexOf(2);</example>
	<description>
		<section type="text" lang="en">Return the position of item in the array.</section>
		<section type="text" lang="fr">Retourne la position de l'élément dans le tableau.</section>
	</description>
	</reference>
	<reference keyword="array.count" package="array" function="count" syntax="array.count (item) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 1, 3, 4, 1};a.count (1);</example>
	<description>
		<section type="text" lang="en">Return the number of item with certain value present in string.</section>
		<section type="text" lang="fr">Retourne le nombre d'élément d'une certaine valeur trouvée dans le tableau.</section>
	</description>
	</reference>
	<reference keyword="array.swap" package="array" function="swap" syntax="array.swap(identity1, identity2) " type="method" kind="dynamic" platform="both">
	<example>set a = array {1, 3, 2}.swap(1, 2);</example>
	<description>
		<section type="text" lang="en">Swap the two items at positions identity1 and identity2.&lt;br&gt;Identity1 &amp; 2 should be the positions of the items or their keys</section>
		<section type="text" lang="fr">Intervertie les deux éléments aux positions identity1 et identity2.&lt;br&gt;Identity1 et 2 peuvent être les positions ou les clés des éléments.</section>
	</description>
	</reference>
	<reference keyword="array.decodePoint" package="array" function="decodePoint" syntax="array.decodePoint () " type="method" kind="dynamic" platform="both">
	<example>set s = array {97, 108, 103, 111, 105, 100}.decodePoint();</example>
	<description>
		<section type="text" lang="en">Create a string from it's unicode codepoint representation.</section>
		<section type="text" lang="fr">Crée une chaîne de caractères à partir de sa représentation codepoint.</section>
	</description>
	</reference>
	<reference keyword="array.find" package="array" function="find" syntax="array.find (function (item [, index [, key]] [, pos]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.find(function (item) {return (item == 2);});</example>
	<description>
		<section type="text" lang="en">Find item of the array for which function returns true.&lt;br&gt;Executed function must define one parameter to retreive the current item of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the item index in the array.&lt;br&gt;The thrid parameter is optional too and deliver the key of the item.&lt;br&gt;Pos is an optional parameter too that indicates the index to begin the search in the list.</section>
		<section type="text" lang="fr">Trouve l'élément du tableau pour lequel la fonction retourne la valeur vraie.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer l'élément à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position de l'élément dans le tableau.&lt;br&gt;Le troisième paramètre est également optionnel, il fournis la clé de l'élément.&lt;br&gt;Pos est un paramètre également optionnel de la méthode find. Elle indique à partir de quel indice la recherche doit commencer.</section>
	</description>
	</reference>
	<reference keyword="array.create" package="array" function="create" syntax="array.create (count, function ([index]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {}.create(4, function () { return math.random(10); });</example>
	<description>
		<section type="text" lang="en">Create an array of n elements. Each element is calculated by function passed by parameter.</section>
		<section type="text" lang="fr">Créer un tableau de n éléments. Chaque élément est calculé par la fonction passée en paramètre.</section>
	</description>
	</reference>  
	<reference keyword="array.each" package="array" function="each" syntax="array.each (function (item [, index [, key]]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.each(function (item) {util.log (item);});</example>
	<description>
		<section type="text" lang="en">Loop on all items of the array.&lt;br&gt;Executed function must define one parameter to retreive the current item of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the item index in the array.&lt;br&gt;The thrid parameter is optional too and deliver the key of the item.</section>
		<section type="text" lang="fr">Itère sur tous les éléments du tableau.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer l'élément à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position de l'élément dans le tableau.&lt;br&gt;Le troisième paramètre est également optionnel, il fournis la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.eachOnRow" package="array" function="eachOnRow" syntax="array.eachOnRow (row, function (item [, index [, key]]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}.eachOnRow(1, function (item) {util.log (item);});</example>
	<description>
		<section type="text" lang="en">In a two dimentional array (une table), loop on all items of the row of the array.&lt;br&gt;Executed function must define one parameter to retreive the current item of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the item index in the array.&lt;br&gt;The thrid parameter is optional too and deliver the key of the item.</section>
		<section type="text" lang="fr">Dans un tableau à deux dimensions, itère sur tous les éléments de la ligne du tableau.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer l'élément à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position de l'élément dans le tableau.&lt;br&gt;Le troisième paramètre est également optionnel, il fournis la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.eachOnCol" package="array" function="eachOnCol" syntax="array.eachOnCol (col, function (item [, index [, key]]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}.eachOnCol(1, function (item) {util.log (item);});</example>
	<description>
		<section type="text" lang="en">In a two dimentional array (a table), loop on all items of the column of the array.&lt;br&gt;Executed function must define one parameter to retreive the current item of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the item index in the array.&lt;br&gt;The thrid parameter is optional too and deliver the key of the item.</section>
		<section type="text" lang="fr">Dans un tableau à deux dimensions (une table), itère sur tous les éléments de la colonne du tableau.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer l'élément à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position de l'élément dans le tableau.&lt;br&gt;Le troisième paramètre est également optionnel, il fournis la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.eachItem" package="array" function="eachItem" syntax="array.eachItem (function (item [, index [, key]]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {1, {2, 3}, {{4, 5}, 6, {7, 8}}}.eachItem(function (item) {util.log (item);});</example>
	<description>
		<section type="text" lang="en">In a multi-dimentional array (a tree), loop on all items of the array, if element is an array, it will loop on it's children recursivelly.&lt;br&gt;Executed function must define one parameter to retreive the current item of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the item index in the array.&lt;br&gt;The thrid parameter is optional too and deliver the key of the item.</section>
		<section type="text" lang="fr">Dans un tableau à plusieurs dimensions (un arbre), itère sur tous les éléments du tableau, si l'élément est un tableau, il va itérer sur les éléments du tableau récursivement.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer l'élément à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position de l'élément dans le tableau.&lt;br&gt;Le troisième paramètre est également optionnel, il fournis la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.filter" package="array" function="filter" syntax="array.filter (function (item [, index [, key]]) {}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3, 4}.each(function (item) {return (item % 2);});</example>
	<description>
		<section type="text" lang="en">Filter the array items on function value.&lt;br&gt;Function must return a boolean value.&lt;br&gt;If the value is true, the item is keeped, else it is removed.&lt;br&gt;Executed function must define one parameter to retreive the current item of each loop iteration.&lt;br&gt;The second parameter index is optional and deliver the item index in the array.&lt;br&gt;The thrid parameter is optional too and deliver the key of the item.</section>
		<section type="text" lang="fr">Filtre les éléments du tableau sur la valeur de retour d'une fonction.&lt;br&gt;La fonction doit retourner un booléen.&lt;br&gt;Si la valeur du booléen est vrai, l'élément est conservé, sinon il est supprimé du tableau.&lt;br&gt;La fonction exécutée doit définir un paramètre pour récupérer l'élément à chaque itération de la boucle.&lt;br&gt;Le second paramètre index est optionnel et fournis la position de l'élément dans le tableau.&lt;br&gt;Le troisième paramètre est également optionnel, il fournis la clé de l'élément.</section>
	</description>
	</reference>
	<reference keyword="array.sort" package="array" function="sort" syntax="array.sort ([function (item1, item2){}]) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {3, 4, 1, 2}.sort();</example>
	<description>
		<section type="text" lang="en">Return an array that the items of the array has been sorted.&lt;br&gt;Function is optional.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Renvoie un tableau trié sur les éléments du tableau.&lt;br&gt;La fonction est optionnelle.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="array.min" package="array" function="min" syntax="array.min ([function (item1, item2){}]) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.min();</example>
	<description>
		<section type="text" lang="en">Return the minimum value contained in the array.&lt;br&gt;Function is optional. See &lt;a href ="#.sort"&gt;sort&lt;/a&gt; for more details.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Retourne la valeur minimale contenue dans le tableau.&lt;br&gt;La fonction est optionnelle. Voir &lt;a href ="#.sort"&gt;sort&lt;/a&gt; pour plus de détails;</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="array.max" package="array" function="max" syntax="array.max ([function (item1, item2){}]) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.max();</example>
	<description>
		<section type="text" lang="en">Return the maximum value contained in the array.&lt;br&gt;Function is optional. See &lt;a href ="#.sort"&gt;sort&lt;/a&gt; for more details;</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Retourne la valeur maximale contenue dans le tableau.&lt;br&gt;La fonction est optionnelle. Voir &lt;a href ="#.sort"&gt;sort&lt;/a&gt; pour plus de détails;</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="array.join" package="array" function="join" syntax="array.join (function (item1, item2 [, index [, key]]){}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3};set s = a.join (function (index, item1, item2) {return item1 + item2;});</example>
	<description>
		<section type="text" lang="en">Join all the elements of the array together.&lt;br&gt;The function is needed to know how to join sequentialy elements.&lt;br&gt;It is usefull for concatenate an array to one string, or to adding all the number element of an array.</section>
		<section type="text" lang="fr">Joint tous les éléments du tableau ensemble.&lt;br&gt;La fonction est nécessaire pour savoir comment joindre séquencielement les éléments.&lt;br&gt;C'est util pour concaténer un tableau en un string ou pour ajouter tous les nombre d'un tableau.</section>
	</description>
	</reference>
	<reference keyword="array.merge" package="array" function="merge" syntax="array.merge (array, function (item1, item2, index [, key]){}) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {1, 2, 3};set b = a.merge (array {3, 2, 1}, function (index, item1, item2) {return item1 + item2;});</example>
	<description>
		<section type="text" lang="en">Return result of the two arrays merging. Each element of the first array is merged with the corresponding element of the second array.&lt;br&gt;The function determin the merging behaviour by returning value of each merged element.&lt;br&gt;Note: if second array is shorter than first one, the elements will be repeated until merging is complete.</section>
		<section type="text" lang="fr">Renvoie le résultat de la fusion de deux tableaux. Chaque élément du premier tableau est fusionné avec l'élément correspondant du second tableau.&lt;br&gt;La fonction détermine le comportement de la fusion en retournant la valeur souhaitée pour chaque élément.&lt;br&gt;Note: si le second tableau est trop court, les éléments seront répétés depuis le début jusqu\à la complétion.</section>
	</description>
	</reference>
	<reference keyword="array.union" package="array" function="union" syntax="array.union (array) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.union(array {4, 5});</example>
	<description>
		<section type="text" lang="en">Return the union of array and subset.</section>
		<section type="text" lang="fr">Retourne l'union du tableau et du subset.</section>
		<section type="text" lang="">&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Venn0111.svg/220px-Venn0111.svg.png"&gt;</section>
	</description>
	</reference>
	<reference keyword="array.intersection" package="array" function="intersection" syntax="array.intersection (array) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.intersection(array {4, 5});</example>
	<description>
		<section type="text" lang="en">Return the intersection of array and subset.</section>
		<section type="text" lang="fr">Retourne l'intersection du tableau et du subset.</section>
		<section type="text" lang="">&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/9/99/Venn0001.svg/220px-Venn0001.svg.png"&gt;</section>
	</description>
	</reference>
	<reference keyword="array.complement" package="array" function="complement" syntax="array.complement (array) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.complement(array {4, 5});</example>
	<description>
		<section type="text" lang="en">Return the complement of array and subset.</section>
		<section type="text" lang="fr">Retourne le complement du tableau et du subset.</section>
		<section type="text" lang="">&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Venn0100.svg/220px-Venn0100.svg.png"&gt;</section>
	</description>
	</reference>
	<reference keyword="array.difference" package="array" function="difference" syntax="array.difference (array) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.difference(array {4, 5});</example>
	<description>
		<section type="text" lang="en">Return the difference of array and subset.</section>
		<section type="text" lang="fr">Retourne la difference du tableau et du subset.</section>
		<section type="text" lang="">&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/46/Venn0110.svg/220px-Venn0110.svg.png"&gt;</section>
	</description>
	</reference>
	<reference keyword="array.product" package="array" function="product" syntax="array.product (array) " type="functional method" kind="dynamic" platform="both">
	<example>set a = array {2, 1, 4, 3}.product(array {4, 5});</example>
	<description>
		<section type="text" lang="en">Return the cartesian product of array and subset.</section>
		<section type="text" lang="fr">Retourne le produit cartesien du tableau et du subset.</section>
	</description>
	</reference>
	<reference keyword="function" package="function" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When a function is declared, AL create an object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.</section>
		<section type="text" lang="fr">Quand une fonction est déclarée, AL créer un objet. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.</section>
	</description>
	</reference>
	<reference keyword="function.parameterExists" package="function" function="parameterExists" syntax="function.parameterExists (name) " type="property" kind="dynamic" platform="both">
	<example>function (a) {}.parameterExists("a");</example>
	<description>
		<section type="text" lang="en">Verify that parameter exists on the function definition.</section>
		<section type="text" lang="fr">Vérifie que le paramètre existe dans la définition de la fonction.</section>
	</description>
	</reference>
	<reference keyword="function.getParametersNames" package="function" function="getParametersNames" syntax="function.getParametersNames () " type="property" kind="dynamic" platform="both">
	<example>function (a) {}.getParametersNames();</example>
	<description>
		<section type="text" lang="en">Return an array that containing all the names of the parameters defined in the function.</section>
		<section type="text" lang="fr">Retourne un tableau contenant tous les noms des paramètres définit par la fonction.</section>
	</description>
	</reference>
	<reference keyword="function.setParameter" package="function" function="setParameter" syntax="function.setParameter (name, value)) " type="property" kind="dynamic" platform="both">
	<example>function (a){util.log ("print " .. a);}.setParameter(0, 7)();</example>
	<description>
		<section type="text" lang="en">Set the value to the parameter of the function that correspond to the name. If parameter does not exists, create it. Usefull to set parameters before execution (for function passing in another without parameters copying).</section>
		<section type="text" lang="fr">Assigne la valeur au paramètre de la fonction dont le nom correspond à name. Le paramètre est créé s'il n'existe pas. Utilisé pour assigner les paramètres avant l'appelle de la fonction (util lors du passage d'une fonction à une autre sans copie des paramètres).</section>
	</description>
	</reference>
	<reference keyword="function.setParameters" package="function" function="setParameters" syntax="function.setParameters ({ values }) " type="property" kind="dynamic" platform="both">
	<example>function (a, b){util.log ("print " .. a .. " and " .. b);}.setParameters(array {7, 8})();</example>
	<description>
		<section type="text" lang="en">Set the values to the parameters of the function. be carefull, the parameters values must be express as array (with {}). Usefull to set all parameters before execution (for function passing in another without parameters copying).</section>
		<section type="text" lang="fr">Assigne les valeurs aux paramètres de la fonction. Attention, les valeurs des paramètres doivent être regroupés dans un tableau (entre {}). Utilisé pour assigner tous les paramètres avant l'appelle de la fonction (util lors du passage d'une fonction à une autre sans copie des paramètres).</section>
	</description>
	</reference>
	<reference keyword="function.removeParameter" package="function" function="removeParameter" syntax="function.removeParameter (name) " type="method" kind="dynamic" platform="both">
	<example>function (a) {}.removeParameter("a");</example>
	<description>
		<section type="text" lang="en">Remove function parameter dynamically from the function definition..</section>
		<section type="text" lang="fr">Supprime dynamiquement un paramètre de la définition de la fonction.</section>
	</description>
	</reference>
	<reference keyword="function.concat" package="function" function="concat" syntax="function.concat (function) " type="functional method" kind="dynamic" platform="both">
	<example>function () {util.log("treatment 1");}.concat(function () {util.log("treatment 2");})();</example>
	<description>
		<section type="text" lang="en">Return a new function that is the result of functions concatenation. Parameters are merged togather and treatments run along. Equivalent to -&gt; operator.</section>
		<section type="text" lang="fr">Retourne une fonction résultat de la concaténation des deux fonctions. Les paramètres sont fusionnés et les traitements s'exécutent en suivant. Equivaut à l'opérateur -&gt;</section>
	</description>
	</reference>
	<reference keyword="function.decorate" package="function" function="decorate" syntax="function.decorate (function) " type="functional method" kind="dynamic" platform="both">
	<example>set f = function (a, b){util.log ("calculate " .. a .. "+" .. b);}.decorate(function (a, b, f) {util.log("before");f (a, b);util.log("after");});</example>
	<description>
		<section type="text" lang="en">Return a new function resulte of the decoration of the function execution with a decorator one. The decored fonction execution is encapsulated into the decorator one. Needed for Aspect Oriented Programming paradigm.</section>
		<section type="text" lang="fr">Renvoie une nouvelle fonction résultat de la décoration de la fonction par une fonction décoratrice. L'éxécution de la fonction décorée est encapsulé dans la fonction décoratrice. Nécessaire au paradigme Aspect.</section>
	</description>
	</reference>
	<reference keyword="object" package="object" function="" syntax="" type="" kind="dynamic" platform="both">
	<description>
		<section type="text" lang="en">When an object is declared, AL create a meta-object. This object have some properties and methods. See &lt;a href ="#.getType"&gt;Type object&lt;/a&gt; for type common methods and properties.</section>
		<section type="text" lang="fr">Quand un objet est déclaré, AL créer un meta-objet. Cet objet à des propriétés et des méthodes. Voir &lt;a href ="#.getType"&gt;l'objet Type&lt;/a&gt; pour les méthodes et les propriétés communes aux types.</section>
	</description>
	</reference>
	<reference keyword="object.clone" package="object" function="clone" syntax="object.clone () " type="prototype" kind="dynamic" platform="both">
	<example>set o = object(){};set p = o.clone();</example>
	<description>
		<section type="text" lang="en">Duplicate the object to another new one.&lt;br&gt;Every modifications of the clone does not affect the original object.&lt;br&gt;It is a new operator equivalent.</section>
		<section type="text" lang="fr">Duplique l'objet vers un nouveau.&lt;br&gt;Chaque modification faite à un clone n'affecte pas l'objet original.&lt;br&gt;C'est l'équivalent de l'opérateur new.</section>
	</description>
	</reference>
	<reference keyword="object.attributeExists" package="object" function="attributeExists" syntax="object.attributeExists (name) " type="property" kind="dynamic" platform="both">
	<example>object () {set a;}.attributeExists("a");</example>
	<description>
		<section type="text" lang="en">Verify that attribute exists on the object definition.</section>
		<section type="text" lang="fr">Vérifie que l'attribut existe dans la définition de l'objet.</section>
	</description>
	</reference>
	<reference keyword="object.getAttributesNames" package="object" function="getAttributesNames" syntax="object.getAttributesNames () " type="property" kind="dynamic" platform="both">
	<example>object () {set a;}.getAttributesNames();</example>
	<description>
		<section type="text" lang="en">Return an array that containing all the names of the Attributes defined in the object.</section>
		<section type="text" lang="fr">Retourne un tableau contenant tous les noms des attributs définit par l'objet.</section>
	</description>
	</reference>
	<reference keyword="object.isA" package="object" function="isA" syntax="object.isA () " type="property" kind="dynamic" platform="both">
	<example>set o = object() {};@set p = new o;@p.isA(o);</example>
	<description>
		<section type="text" lang="en">Verify that object is an instance or a sub-object of the parameter one.</section>
		<section type="text" lang="fr">Vérifie que l'objet soit une instance ou un sous objet de celui en paramètre.</section>
	</description>
	</reference>
	<reference keyword="object.setAttribute" package="object" function="setAttribute" syntax="object.setAttribute (name, value) " type="property" kind="dynamic" platform="both">
	<example>set o = object () {};o.setAttribute ("a", 7);o.a;</example>
	<description>
		<section type="text" lang="en">Set or add (if does not exists) Attribute dynamically to the object definition. Attribute can be an attribute, a method or a nested object.</section>
		<section type="text" lang="fr">Assigne ou ajoute (si absent) dynamiquement un attribut à la définition de l'objet. L'attribut peut-être un attribut, une méthode ou un objet imbriqué.</section>
	</description>
	</reference>
	<reference keyword="object.toString" package="object" function="toString" syntax="object.toString = function () {}" type="method" kind="method" platform="both">
	<example>set o = object () {
		set toString = function () { return "My String" }
	}

	print (o)</example>
	<description>
		<section type="text" lang="en">Replace the default text when object is printed.</section>
		<section type="text" lang="fr">Remplace le text par défaut de l'object.</section>
	</description>
	</reference>  
	<reference keyword="object.merge" package="object" function="merge" syntax="object.merge (object) " type="method" kind="dynamic" platform="both">
	<example>object () {}.merge(object () {});</example>
	<description>
		<section type="text" lang="en">Return an object that is the result of two objects merging. The definitions are merged togather by addition of the attributes and methods.</section>
		<section type="text" lang="fr">Renvoie un objet résultat de la fusion de deux objets. Les définitions sont fusionnées ensemble par addition des attributs et des méthodes.</section>
	</description>
	</reference>
	<reference keyword="object.removeAttribute" package="object" function="removeAttribute" syntax="object.removeAttribute (name) " type="method" kind="dynamic" platform="both">
	<example>set o = object () {set a = 7;};o.removeAttribute ("a");</example>
	<description>
		<section type="text" lang="en">Remove object attribute dynamically from the object definition. Attribute can be an attribute, a method or a nested object.</section>
		<section type="text" lang="fr">Supprime dynamiquement un attribut de la définition de l'objet. L'attribut peut-être un attribut, une méthode ou un objet imbriqué.</section>
	</description>
	</reference>

	<!-- API -->
	<reference keyword="print" package="" function="print" syntax="print (text) " type="method" kind="method" platform="both">
	<example>print ("hi world !");</example>
	<description>
		<section type="text" lang="en">Print a line with text.</section>
		<section type="text" lang="fr">Ecrit le texte.</section>
	</description>
	</reference>  
	<reference keyword="al.allObjects" package="al" function="allObjects" syntax="al.allObjects" type="property" kind="method" platform="both">
	<example>al.allObjects().each(print);</example>
	<description>
		<section type="text" lang="en">Return all the Algoid API objects and methods that can be uses.</section>
		<section type="text" lang="fr">Retourne tous les objets et les méthodes qui peuvent être utilisés dans l'API Algoid.</section>
	</description>
	</reference>
	<reference keyword="al.allLocalObjects" package="al" function="allLocalObjects" syntax="al.allLocalObjects" type="property" kind="method" platform="both">
	<example>al.allLocalObjects().each(print);</example>
	<description>
		<section type="text" lang="en">Return all the objects and methods that can be uses in current scope.</section>
		<section type="text" lang="fr">Retourne tous les objets et les méthodes qui peuvent être utilisés dans la portée courante.</section>
	</description>
	</reference>
	<reference keyword="al.clock" package="al" function="clock" syntax="al.clock" type="property" kind="method" platform="both">
	<example>set t = al.clock();</example>
	<description>
		<section type="text" lang="en">Return the time is second from Algoid was started.</section>
		<section type="text" lang="fr">Retourne le temps en seconde depuis lequel Algoid a été lancé.</section>
	</description>
	</reference>
	<reference keyword="al.order.ascending" package="al.order" function="ascending" syntax="al.order.ascending (item1, item2) " type="method" kind="method" platform="both">
	<example>array {4, 7, 2, 8}.sort (al.order.ascending);</example>
	<description>
		<section type="text" lang="en">Sort the order of the array with ascending maneer.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Trie l'ordre du tableau de façon ascendante.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.order.descending" package="al.order" function="descending" syntax="al.order.descending (item1, item2) " type="method" kind="method" platform="both">
	<example>array {4, 7, 2, 8}.sort (al.order.descending);</example>
	<description>
		<section type="text" lang="en">Sort the order of the array with descending maneer.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Trie l'ordre du tableau de façon ascendante.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.order.random" package="al.order" function="random" syntax="al.order.random (item1, item2) " type="method" kind="method" platform="both">
	<example>array {4, 7, 2, 8}.sort (al.order.random);</example>
	<description>
		<section type="text" lang="en">random the order of the array.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Inverse l'ordre du tableau.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.order.reverse" package="al.order" function="reverse" syntax="al.order.reverse (item1, item2) " type="method" kind="method" platform="both">
	<example>array {4, 7, 2, 8}.sort (al.order.reverse);</example>
	<description>
		<section type="text" lang="en">Reverse the order of the array.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Inverse l'ordre du tableau.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.combine.sum" package="al.combine" function="sum" syntax="al.combine.sum (item1, item2) " type="method" kind="method" platform="both">
	<example>array {4, 7, 2, 8}.join (al.combine.sum);</example>
	<description>
		<section type="text" lang="en">Combine the elements of an array together by summing.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Combine les éléments d'un tableau ensemble par sommage.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.combine.product" package="al.combine" function="product" syntax="al.combine.product (item1, item2) " type="method" kind="method" platform="both">
	<example>array {4, 7, 2, 8}.join (al.combine.product);</example>
	<description>
		<section type="text" lang="en">Combine the elements of an array together with a product.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Combine les éléments d'un tableau ensemble par produit.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.combine.concat" package="al.combine" function="concat" syntax="al.combine.concat (item1, item2, index, key, separator) " type="method" kind="method" platform="both">
	<example>array {"Hi", "I", "am", "Algoid!"}.join (al.combine.concat);</example>
	<description>
		<section type="text" lang="en">Combine the elements of an array together by concatening them.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Combine les éléments d'un tableau ensemble par concaténation.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="al.types.VOID" package="al.types" function="VOID" syntax="al.types.VOID" type="property" kind="method" platform="both">
	<example>set a;@a.is(al.types.VOID);</example>
	<description>
		<section type="text" lang="en">The AL VOID type. It is a null value.</section>
		<section type="text" lang="fr">Le type AL VOID. Représente une valeur nulle.</section>
	</description>
	</reference>
	<reference keyword="al.types.BOOL" package="al.types" function="BOOL" syntax="al.types.BOOL" type="property" kind="method" platform="both">
	<example>true.is(al.types.BOOL);</example>
	<description>
		<section type="text" lang="en">The AL BOOL type. It is a boolean value (true, false).</section>
		<section type="text" lang="fr">Le type AL BOOL. Représente une valeur booléenne (true, false).</section>
	</description>
	</reference>
	<reference keyword="al.types.NUMBER" package="al.types" function="NUMBER" syntax="al.types.NUMBER" type="property" kind="method" platform="both">
	<example>(7).is(al.types.NUMBER);</example>
	<description>
		<section type="text" lang="en">The AL NUMBER type. It is a numeric value (1, 2, 3.5, 7 ....).</section>
		<section type="text" lang="fr">Le type AL NUMBER. Représente une valeur numérique (1, 2, 3.5, 7 ....).</section>
	</description>
	</reference>
	<reference keyword="al.types.STRING" package="al.types" function="STRING" syntax="al.types.STRING" type="property" kind="method" platform="both">
	<example>"Hi".is(al.types.STRING);</example>
	<description>
		<section type="text" lang="en">The AL STRING type. It is a string value.</section>
		<section type="text" lang="fr">Le type AL STRING. Représente une chaîne de caractère ("Hi, I am algoid !").</section>
	</description>
	</reference>
	<reference keyword="al.types.ARRAY" package="al.types" function="ARRAY" syntax="al.types.ARRAY" type="property" kind="method" platform="both">
	<example>array {}.is(al.types.ARRAY);</example>
	<description>
		<section type="text" lang="en">The AL ARRAY type. It is a array value.</section>
		<section type="text" lang="fr">Le type AL ARRAY. Représente un tableau de données ({true, 5, "Hi"}).</section>
	</description>
	</reference>
	<reference keyword="al.types.FUNCTION" package="al.types" function="FUNCTION" syntax="al.types.FUNCTION" type="property" kind="method" platform="both">
	<example>function() {}.is(al.types.FUNCTION);</example>
	<description>
		<section type="text" lang="en">The AL FUNCTION type. It is a function.</section>
		<section type="text" lang="fr">Le type AL FUNCTION. Représente une fonction.</section>
	</description>
	</reference>
	<reference keyword="al.types.OBJECT" package="al.types" function="OBJECT" syntax="al.types.OBJECT" type="property" kind="method" platform="both">
	<example>object() {}.is(al.types.OBJECT);</example>
	<description>
		<section type="text" lang="en">The AL OBJECT type. It is an object.</section>
		<section type="text" lang="fr">Le type AL OBJECT. Représente un objet.</section>
	</description>
	</reference>
	<reference keyword="util.eval" package="util" function="eval" syntax="util.eval (code) " type="method" kind="method" platform="both">
	<example>util.eval ("ui.message(7);");</example>
	<description>
		<section type="text" lang="en">Execute code in parameter in current scope.</section>
		<section type="text" lang="fr">Execute le code en paramètre dans la portée courante.</section>
	</description>
	</reference>
	<reference keyword="util.wait" package="util" function="wait" syntax="util.wait (milli) " type="method" kind="method" platform="both">
	<example>util.wait (500);</example>
	<description>
		<section type="text" lang="en">Wait the time indicated in milli-seconds.</section>
		<section type="text" lang="fr">Attendre le temps indiqué en milli-secondes</section>
	</description>
	</reference>
	<reference keyword="util.pulse" package="util" function="pulse" syntax="util.pulse (function ([index]) {}, milli [, count[, after]]) " type="method" kind="method" platform="both">
	<example>set f = function () {};util.pulse (f, 500);</example>
	<description>
		<section type="text" lang="en">Execute function each time number of milli-seconds is elapsed.&lt;br&gt;The called function received an optional parameter named index that specify the call number.&lt;br&gt;When function return a value, it terminate the event.&lt;br&gt; The optional parameter count define a number of time that pulse run before finish. When pulse is finnished, call the 'after' parameter function.</section>
		<section type="text" lang="fr">Execute la foncion chaque fois que le temps (milli-secondes) est écoulé.&lt;br&gt;La fonction appellé reçoit un paramètre optionel appellé index qui spécifie le numéro d'appel.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.&lt;br&gt;Le paramère optionel count spécifie combien de fois pulse fonctionne avant d'être arreté. Appel la fonction after un fois pulse finis.</section>
	</description>
	</reference>
	<reference keyword="util.notice" package="util" function="notice" syntax="util.notice (function, milli) " type="method" kind="method" platform="both">
	<example>set f = function () {};util.notice (f, 500);</example>
	<description>
		<section type="text" lang="en">Execute function after the amount of specified milli-seconds is elapsed.</section>
		<section type="text" lang="fr">Execute la fonction après un temps donné.</section>
	</description>
	</reference>
	<reference keyword="util.pullOn" package="util" function="pullOn" syntax="util.pullOn (array, milli) " type="method" kind="method" platform="both">
	<example>set f = function () {};set g = function () {};util.pullOn (array {f, g}, 500);</example>
	<description>
		<section type="text" lang="en">PullOn accept an array of functions. It execute them sequentially with a delay between them.</section>
		<section type="text" lang="fr">PullOn accepte un tableau de fonction qu'il execute sequentiellement avec un delai entre chaque appel.</section>
	</description>
	</reference>
	<reference keyword="util.clearTasks" package="util" function="clearTasks" syntax="util.clearTasks (array, milli) " type="method" kind="method" platform="both">
	<example>set f = function () {};set g = function () {};util.pullOn (array {f, g}, 500);</example>
	<description>
		<section type="text" lang="en">Clear all upcoming tasks and events but not the current one.</section>
		<section type="text" lang="fr">Supprime toutes les tâches et les evenements à venir, mais pas la tâche courante.</section>
	</description>
	</reference>
	<reference keyword="util.log" package="util" function="log" syntax="util.log (msg) " type="method" kind="method" platform="both">
	<example>util.log ("my log");</example>
	<description>
		<section type="text" lang="en">Log the message to the log file.</section>
		<section type="text" lang="fr">Ecrit le message dans le journal.</section>
	</description>
	</reference>
	<reference keyword="util.warn" package="util" function="warn" syntax="util.warn (msg) " type="method" kind="method" platform="both">
	<example>util.warn ("my warning");</example>
	<description>
		<section type="text" lang="en">Log the message to the log file as warning (orange).</section>
		<section type="text" lang="fr">Ecrit le warning dans le journal (orange).</section>
	</description>
	</reference>
	<reference keyword="util.err" package="util" function="err" syntax="util.err (msg) " type="method" kind="method" platform="both">
	<example>util.err ("my error");</example>
	<description>
		<section type="text" lang="en">Log the message to log file as error (red).</section>
		<section type="text" lang="fr">Ecrit l'erreur dans le journal (rouge).</section>
	</description>
	</reference>
	<reference keyword="math.E" package="math" function="E" syntax="math.E " type="constant" kind="method" platform="both">
	<example>math.E;</example>
	<description>
		<section type="text" lang="en">The mathematical constant e.</section>
		<section type="text" lang="fr">La constante mathématique e.</section>
	</description>
	</reference>
	<reference keyword="math.PI" package="math" function="PI" syntax="math.PI " type="constant" kind="method" platform="both">
	<example>math.PI;</example>
	<description>
		<section type="text" lang="en">The mathematical constant PI.</section>
		<section type="text" lang="fr">La constante mathématique PI.</section>
	</description>
	</reference>
	<reference keyword="math.abs" package="math" function="abs" syntax="math.abs (number) " type="method" kind="method" platform="both">
	<example>math.abs(-7);</example>
	<description>
		<section type="text" lang="en">Get the absolute value (positive) of a number.</section>
		<section type="text" lang="fr">Retourne la valeur absolue (positive) du nombre.</section>
	</description>
	</reference>
	<reference keyword="math.acos" package="math" function="acos" syntax="math.acos (factor) " type="method" kind="method" platform="both">
	<example>math.acos(1/4);</example>
	<description>
		<section type="text" lang="en">Calculate the arc cosinus of the segments factor.</section>
		<section type="text" lang="fr">Calcule l'arc cosinus d'un angle en degré.</section>
	</description>
	</reference>
	<reference keyword="math.aim" package="math" function="aim" syntax="math.aim (number, number) " type="method" kind="method" platform="both">
	<example>math.aim(2, 3);</example>
	<description>
		<section type="text" lang="en">Calculates the angle of algo to aim target from center coordonates (0, 0).</section>
		<section type="text" lang="fr">Calcule l'angle pour suivre une cible depuis les coordonnées (0, 0) du plan.</section>
	</description>
	</reference>
	<reference keyword="math.asin" package="math" function="asin" syntax="math.asin (factor) " type="method" kind="method" platform="both">
	<example>math.asin(1/4)</example>
	<description>
		<section type="text" lang="en">Calculate the arc sinus of the segments factor.</section>
		<section type="text" lang="fr">Calcule l'arc sinun d'un angle en degré.</section>
	</description>
	</reference>
	<reference keyword="math.atan" package="math" function="atan" syntax="math.atan (factor) " type="method" kind="method" platform="both">
	<example>math.atan(1/4)</example>
	<description>
		<section type="text" lang="en">Calculate the arc tangent of the segments factor.</section>
		<section type="text" lang="fr">Calcule l'arc tangente d'un angle en degré.</section>
	</description>
	</reference>
	<reference keyword="math.ceil" package="math" function="ceil" syntax="math.ceil (number) " type="method" kind="method" platform="both">
	<example>math.ceil(10.9)</example>
	<description>
		<section type="text" lang="en">Return the smallest natural value directly greater than the number : 10.9 = 11</section>
		<section type="text" lang="fr">Renvoie la plus petite valeur entière directement suppérieur au nombre : 10.9 = 11</section>
	</description>
	</reference>
	<reference keyword="math.cos" package="math" function="cos" syntax="math.cos (angle) " type="method" kind="method" platform="both">
	<example>math.cos(45)</example>
	<description>
		<section type="text" lang="en">Calculate the cosinus of the angle in degree.</section>
		<section type="text" lang="fr">Calcule le cosinus d'un angle en degré.</section>
	</description>
	</reference>
	<reference keyword="math.dbl" package="math" function="dbl" syntax="math.dbl (number) " type="method" kind="method" platform="both">
	<example>math.dbl(2)</example>
	<description>
		<section type="text" lang="en">Calculate the 2 power of the number.</section>
		<section type="text" lang="fr">Calcule le nombre à la puissance 2.</section>
	</description>
	</reference>
	<reference keyword="math.diagonal" package="math" function="diagonal" syntax="math.diagonal (number, number) " type="method" kind="method" platform="both">
	<example>math.diagonal(2, 3)</example>
	<description>
		<section type="text" lang="en">Calculates the diagonal (hypotenuse) of the rectangle.</section>
		<section type="text" lang="fr">Calcule la longueur de la diagonale (hypothénuse) d'un rectangle.</section>
	</description>
	</reference>
	<reference keyword="math.exp" package="math" function="exp" syntax="math.exp (number) " type="method" kind="method" platform="both">
	<example>math.exp(10)</example>
	<description>
		<section type="text" lang="en">Calculate the exponential of the number.</section>
		<section type="text" lang="fr">Calcule la valeur exponentielle du nombre.</section>
	</description>
	</reference>
	<reference keyword="math.floor" package="math" function="floor" syntax="math.floor (number) " type="method" kind="method" platform="both">
	<example>math.floor(10.9)</example>
	<description>
		<section type="text" lang="en">Return the natural part of the number : 10.9 = 10</section>
		<section type="text" lang="fr">Renvoie la partie entière du nombre : 10.9 = 10</section>
	</description>
	</reference>
	<reference keyword="math.log" package="math" function="log" syntax="math.log (number[, base]) " type="method" kind="method" platform="both">
	<example>math.log(10, 2)</example>
	<description>
		<section type="text" lang="en">Return the natural(e) log of the number. If base is setted, return the logarithm of the number to the given base.</section>
		<section type="text" lang="fr">Renvoie le logarithme naturel du nombre. Is la base est assignée, renvoie le logarithme du nombre de la base donnée.</section>
	</description>
	</reference>
	<reference keyword="math.max" package="math" function="max" syntax="math.max (number, number) " type="method" kind="method" platform="both">
	<example>set a = math.max(2, 3)</example>
	<description>
		<section type="text" lang="en">Returns the greater of the two numbers.</section>
		<section type="text" lang="fr">Retourne le plus grand des deux nombres.</section>
	</description>
	</reference>
	<reference keyword="math.min" package="math" function="min" syntax="math.min (number, number) " type="method" kind="method" platform="both">
	<example>set a = math.min(2, 3)</example>
	<description>
		<section type="text" lang="en">Returns the smaller of the two numbers.</section>
		<section type="text" lang="fr">Retourne le plus petit des deux nombres.</section>
	</description>
	</reference>
	<reference keyword="math.pow" package="math" function="pow" syntax="math.pow (number, power) " type="method" kind="method" platform="both">
	<example>math.pow(2, 3)</example>
	<description>
		<section type="text" lang="en">Calculate the n power of the number.</section>
		<section type="text" lang="fr">Calcule le nombre à la puissance n.</section>
	</description>
	</reference>
	<reference keyword="math.random" package="math" function="random" syntax="math.random (factor) " type="method" kind="method" platform="both">
	<example>math.random(10)</example>
	<description>
		<section type="text" lang="en">Generate a random number between 0 and factor excluded</section>
		<section type="text" lang="fr">Génère un nombre aléatoire entre 0 et factor à l\exception de celui-ci.</section>
	</description>
	</reference>
	<reference keyword="math.round" package="math" function="round" syntax="math.round (number) " type="method" kind="method" platform="both">
	<example>math.round(10.9)</example>
	<description>
		<section type="text" lang="en">Round the reel number to natural one : 10.9 = 11</section>
		<section type="text" lang="fr">Arrondi le nombre réel en un nombre naturel : 10.9 = 11</section>
	</description>
	</reference>
	<reference keyword="math.sin" package="math" function="sin" syntax="math.sin (angle) " type="method" kind="method" platform="both">
	<example>math.sin(45)</example>
	<description>
		<section type="text" lang="en">Calculate the sinus of the angle in degree.</section>
		<section type="text" lang="fr">Calcule le sinun d'un angle en degré.</section>
	</description>
	</reference>
	<reference keyword="math.sqrt" package="math" function="sqrt" syntax="math.sqrt (number) " type="method" kind="method" platform="both">
	<example>math.sqrt(2, 3)</example>
	<description>
		<section type="text" lang="en">Calculate the squared root of the number.</section>
		<section type="text" lang="fr">Calcule la racine carrée du nombre.</section>
	</description>
	</reference>
	<reference keyword="math.tan" package="math" function="tan" syntax="math.tan (angle) " type="method" kind="method" platform="both">
	<example>math.tan(45)</example>
	<description>
		<section type="text" lang="en">Calculate the tangent of the angle in degree.</section>
		<section type="text" lang="fr">Calcule la tangente d'un angle en degré.</section>
	</description>
	</reference>
	<reference keyword="ui.message" package="ui" function="message" syntax="ui.message (msg)" type="method" kind="method" platform="both">
	<example>ui.message ("my message");</example>
	<description>
		<section type="text" lang="en">Display a message box popup in application.</section>
		<section type="text" lang="fr">Affiche une fenêtre popup de message dans l'application.</section>
	</description>
	</reference>
	<reference keyword="ui.fullScreen" package="ui" function="fullScreen" syntax="ui.fullScreen ()" type="method" kind="method" platform="both">
	<example>ui.fullScreen ();</example>
	<description>
		<section type="text" lang="en">Show execution window in full screen mode.</section>
		<section type="text" lang="fr">Montre la fenêtre d'exécution en mode plein écran.</section>
	</description>
	</reference>
	<reference keyword="ui.halfScreen" package="ui" function="halfScreen" syntax="ui.halfScreen ()" type="method" kind="method" platform="both">
	<example>ui.halfScreen ();</example>
	<description>
		<section type="text" lang="en">Show execution window in half screen mode.</section>
		<section type="text" lang="fr">Montre la fenêtre d'exécution en mode demi écran.</section>
	</description>
	</reference>
	<reference keyword="ui.miniScreen" package="ui" function="miniScreen" syntax="ui.miniScreen ()" type="method" kind="method" platform="both">
	<example>ui.miniScreen ();</example>
	<description>
		<section type="text" lang="en">Hide execution window and show source code.</section>
		<section type="text" lang="fr">Cache la fenêtre d'exécution et montre le code source.</section>
	</description>
	</reference>
	<reference keyword="ui.showText" package="ui" function="showText" syntax="ui.showText ()" type="method" kind="method" platform="both">
	<example>ui.showText ();</example>
	<description>
		<section type="text" lang="en">Flip to text window, text allow exchange input and output messages with user.</section>
		<section type="text" lang="fr">Montre la fenêtre d'invite en mode demi écran.</section>
	</description>
	</reference>
	<reference keyword="ui.showAlgo" package="ui" function="showAlgo" syntax="ui.showAlgo ()" type="method" kind="method" platform="both">
	<example>ui.showAlgo ();</example>
	<description>
		<section type="text" lang="en">Flip to algo window.</section>
		<section type="text" lang="fr">Fait défiler les fenêtres jusqu'à celle d'algo.</section>
	</description>
	</reference>
	<reference keyword="ui.showScope" package="ui" function="showScope" syntax="ui.showScope ()" type="method" kind="method" platform="both">
	<example>ui.showScope ();</example>
	<description>
		<section type="text" lang="en">Flip to scope debugger window.</section>
		<section type="text" lang="fr">Fait défiler les fenêtres jusqu'à celle du debuger.</section>
	</description>
	</reference>
	<reference keyword="ui.showLog" package="ui" function="showLog" syntax="ui.showLog ()" type="method" kind="method" platform="both">
	<example>ui.showLog ();</example>
	<description>
		<section type="text" lang="en">Flip to log file window.</section>
		<section type="text" lang="fr">Fait défiler les fenêtres jusqu'à celle du journal.</section>
	</description>
	</reference>
	<reference keyword="ui.clearLog" package="ui" function="clearLog" syntax="ui.clearLog ()" type="method" kind="method" platform="both">
	<example>ui.clearLog ();</example>
	<description>
		<section type="text" lang="en">Clear the application log file.</section>
		<section type="text" lang="fr">Vide le journal.</section>
	</description>
	</reference>
	<reference keyword="ui.showMenu" package="ui" function="showMenu" syntax="ui.showMenu ()" type="method" kind="method" platform="android">
	<example>ui.showMenu ();</example>
	<description>
		<section type="text" lang="en">Show the slidding menu on the right of algo screen.</section>
		<section type="text" lang="fr">Montre le menu glissant à la droite de la fenêtre algo.</section>
	</description>
	</reference>
	<reference keyword="ui.hideMenu" package="ui" function="hideMenu" syntax="ui.hideMenu ()" type="method" kind="method" platform="android">
	<example>ui.hideMenu ();</example>
	<description>
		<section type="text" lang="en">Hide the slidding menu on the right of algo screen.</section>
		<section type="text" lang="fr">Cache le menu glissant à la droite de la fenêtre algo.</section>
	</description>
	</reference>
	<reference keyword="text.clear" package="text" function="clear" syntax="text.clear ()" type="method" kind="method" platform="both">
	<example>text.clear ();</example>
	<description>
		<section type="text" lang="en">Clear the text window of all content (inputs and outputs).</section>
		<section type="text" lang="fr">Vide la fenêtre d'invite.</section>
	</description>
	</reference>
	<reference keyword="text.output" package="text" function="output" syntax="text.output (msg)" type="method" kind="method" platform="both">
	<example>text.output ("my text");</example>
	<description>
		<section type="text" lang="en">Print a new line in text window.</section>
		<section type="text" lang="fr">Ecrit une nouvelle ligne dans la fenêtre d'invite.</section>
	</description>
	</reference>
	<reference keyword="text.inputText" package="text" function="inputText" syntax="text.inputText (msg)" type="method" kind="method" platform="both">
	<example>set answer = text.inputText ("what text ?");</example>
	<description>
		<section type="text" lang="en">Print a new line in text window with text box control to ask user.&lt;br&gt;Return a string.</section>
		<section type="text" lang="fr">Ecrit une nouvelle ligne de saisie utilisateur (texte) dans la fenêtre d'invite.&lt;br&gt;Retourne une chaîne de caractère.</section>
	</description>
	</reference>
	<reference keyword="text.inputNumber" package="text" function="inputNumber" syntax="text.inputNumber (msg)" type="method" kind="method" platform="both">
	<example>set answer = text.inputNumber ("what number ?");</example>
	<description>
		<section type="text" lang="en">Print a new line in text window with number box control to ask user.&lt;br&gt;Return a number.</section>
		<section type="text" lang="fr">Ecrit une nouvelle ligne de saisie utilisateur (nombre) dans la fenêtre d'invite.&lt;br&gt;Retourne un nombre.</section>
	</description>
	</reference>
	<reference keyword="algo.color.TRANSP" package="algo.color" function="TRANSP" syntax="algo.color.TRANSP " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.TRANSP );</example>
	<description>
		<section type="text" lang="en">Represent the transparent color constant (-1). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur transparente (-1). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.BLACK" package="algo.color" function="BLACK" syntax="algo.color.BLACK " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.BLACK );</example>
	<description>
		<section type="text" lang="en">Represent the black color constant (0). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur noire (0). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.DARK_BLUE" package="algo.color" function="DARK_BLUE" syntax="algo.color.DARK_BLUE " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.DARK_BLUE );</example>
	<description>
		<section type="text" lang="en">Represent the dark blue color constant (1). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur bleu foncé (1). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.DARK_GREEN" package="algo.color" function="DARK_GREEN" syntax="algo.color.DARK_GREEN " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.DARK_GREEN );</example>
	<description>
		<section type="text" lang="en">Represent the dark green color constant (2). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur vert foncé (2). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.DARK_CYAN" package="algo.color" function="DARK_CYAN" syntax="algo.color.DARK_CYAN " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.DARK_CYAN );</example>
	<description>
		<section type="text" lang="en">Represent the dark cyann color constant(3). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur cyan foncé (3). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.DARK_RED" package="algo.color" function="DARK_RED" syntax="algo.color.DARK_RED " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.DARK_RED );</example>
	<description>
		<section type="text" lang="en">Represent the dark red color constant (4). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur rouge foncé (4). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.DARK_MAGENTA" package="algo.color" function="DARK_MAGENTA" syntax="algo.color.DARK_MAGENTA " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.DARK_MAGENTA );</example>
	<description>
		<section type="text" lang="en">Represent the dark magenta color constant (5). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur violet foncé (5). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.BROWN" package="algo.color" function="BROWN" syntax="algo.color.BROWN " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.BROWN );</example>
	<description>
		<section type="text" lang="en">Represent the brown color constant (6). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur marron (6). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.GRAY" package="algo.color" function="GRAY" syntax="algo.color.GRAY " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.GRAY );</example>
	<description>
		<section type="text" lang="en">Represent the gray color constant (7). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur gris (7). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.DARK_GRAY" package="algo.color" function="DARK_GRAY" syntax="algo.color.DARK_GRAY " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.DARK_GRAY );</example>
	<description>
		<section type="text" lang="en">Represent the dark gray color constant (8). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur gris foncé (8). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.BLUE" package="algo.color" function="BLUE" syntax="algo.color.BLUE " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.BLUE );</example>
	<description>
		<section type="text" lang="en">Represent the blue constant (9). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur bleu (9). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.GREEN" package="algo.color" function="GREEN" syntax="algo.color.GREEN " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.GREEN );</example>
	<description>
		<section type="text" lang="en">Represent the green color constant (10). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur vert (10). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.CYAN" package="algo.color" function="CYAN" syntax="algo.color.CYAN " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.CYAN );</example>
	<description>
		<section type="text" lang="en">Represent the cyann color constant(11). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur cyan (11). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.RED" package="algo.color" function="RED" syntax="algo.color.RED " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.RED );</example>
	<description>
		<section type="text" lang="en">Represent the red color constant (12). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur rouge (12). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.MAGENTA" package="algo.color" function="MAGENTA" syntax="algo.color.MAGENTA " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.MAGENTA );</example>
	<description>
		<section type="text" lang="en">Represent the magenta color constant (13). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur violet (13). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.YELLOW" package="algo.color" function="YELLOW" syntax="algo.color.YELLOW " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.YELLOW );</example>
	<description>
		<section type="text" lang="en">Represent the yellow color constant (14). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur jaune (14). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.color.WHITE" package="algo.color" function="WHITE" syntax="algo.color.WHITE " type="constant" kind="method" platform="both">
	<example>algo.setColor( algo.color.WHITE );</example>
	<description>
		<section type="text" lang="en">Represent the white color constant (15). See &lt;a href ="#algo.setColor"&gt;colors table&lt;/a&gt;.</section>
		<section type="text" lang="fr">La constante de couleur blanc (15). Voir la &lt;a href ="#algo.setColor"&gt;table des couleurs&lt;/a&gt;.</section>
	</description>
	</reference>
	<reference keyword="algo.setColor" package="algo" function="setColor" syntax="algo.setColor (color) " type="property" kind="method" platform="both">
	<example>algo.setColor (1);</example>
	<description>
		<section type="text" lang="en">Set the foreground color of Algo's futur shapes and paths.</section>
		<section type="include" lang="en" url="colors_EN.php" />
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Détermine la couleur des futures formes d'Algo.</section>
		<section type="include" lang="fr" url="colors_FR.php" />
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="algo.setRGB" package="algo" function="setRGB" syntax="algo.setRGB (red, green, blue) " type="property" kind="method" platform="both">
	<example>algo.setRGB (0, 128, 255);</example>
	<description>
		<section type="text" lang="en">Set the foreground RGB color of Algo's futur shapes and paths.</section>
		<section type="text" lang="fr">Détermine la couleur RGB des futures formes d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.setBgColor" package="algo" function="setBgColor" syntax="algo.setBgColor (color) " type="property" kind="method" platform="both">
	<example>algo.setBgColor (0);</example>
	<description>
		<section type="text" lang="en">Set the current background color of Algo.</section>
		<section type="text" lang="fr">Détermine la couleur de fond d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.setBgRGB" package="algo" function="setBgRGB" syntax="algo.setBgRGB (red, green, blue) " type="property" kind="method" platform="both">
	<example>algo.setBgRGB (0, 128, 255);</example>
	<description>
		<section type="text" lang="en">Set the background RGB color of Algo's futur shapes and paths.</section>
		<section type="text" lang="fr">Détermine la couleur RGB du fond d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.setAlpha" package="algo" function="setAlpha" syntax="algo.setAlpha (color) " type="property" kind="method" platform="both">
	<example>algo.setAlpha (0.5);</example>
	<description>
		<section type="text" lang="en">Set the current transparency of color of futur shapes. Value must be between 0 and 1.</section>
		<section type="text" lang="fr">Détermine la transparence de la couleur des futures formes. La valeur doit être entre 0 et 1.</section>
	</description>
	</reference>
	<reference keyword="algo.setTextSize" package="algo" function="setTextSize" syntax="algo.setTextSize (size) " type="property" kind="method" platform="both">
	<example>algo.setTextSize (20);</example>
	<description>
		<section type="text" lang="en">Set the text size of Algo's futur text.</section>
		<section type="text" lang="fr">Détermine la taille du futures texte d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.setStroke" package="algo" function="setStroke" syntax="algo.setStroke (size) " type="property" kind="method" platform="both">
	<example>algo.setStroke (2);</example>
	<description>
		<section type="text" lang="en">Set the stroke size of Algo's futur shapes and paths.</section>
		<section type="text" lang="fr">Détermine l'épaisseur du trait des futures formes et chemins d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.setStack" package="algo" function="setStack" syntax="algo.setStack () " type="property" kind="method" platform="both">
	<example>algo.setStack (10);</example>
	<description>
		<section type="text" lang="en">Set the number of simultaneous visible elements in Algo.</section>
		<section type="text" lang="fr">Détermine les nombre d'éléments simultanément visible dans Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.getX" package="algo" function="getX" syntax="algo.getX () " type="property" kind="method" platform="both">
	<example>set x = algo.getX ();</example>
	<description>
		<section type="text" lang="en">Get the X coordonate of Algo.</section>
		<section type="text" lang="fr">Obtient la coordoné X d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.getY" package="algo" function="getY" syntax="algo.getY () " type="property" kind="method" platform="both">
	<example>set y = algo.getY ();</example>
	<description>
		<section type="text" lang="en">Get the Y coordonate of Algo.</section>
		<section type="text" lang="fr">Obtient la coordoné Y d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.getAngle" package="algo" function="getAngle" syntax="algo.getAngle () " type="property" kind="method" platform="both">
	<example>set a = algo.getAngle ();</example>
	<description>
		<section type="text" lang="en">Get the angle of Algo.</section>
		<section type="text" lang="fr">Obtient l'angle d'Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.getTop" package="algo" function="getTop" syntax="algo.getTop () " type="property" kind="method" platform="both">
	<example>set n = algo.getTop ();</example>
	<description>
		<section type="text" lang="en">Get the top coordonate of Algo window (lower than 0).</section>
		<section type="text" lang="fr">Obtient la coordoné du haut de la fenêtre Algo (inférieur à 0).</section>
	</description>
	</reference>
	<reference keyword="algo.getBottom" package="algo" function="getBottom" syntax="algo.getBottom () " type="property" kind="method" platform="both">
	<example>set n = algo.getBottom ();</example>
	<description>
		<section type="text" lang="en">Get the bottom coordonate of Algo window (greater than 0).</section>
		<section type="text" lang="fr">Obtient la coordoné du bas de la fenêtre Algo (supérieur à 0).</section>
	</description>
	</reference>
	<reference keyword="algo.getLeft" package="algo" function="getLeft" syntax="algo.getLeft () " type="property" kind="method" platform="both">
	<example>set n = algo.getLeft ();</example>
	<description>
		<section type="text" lang="en">Get the left coordonate of Algo window (lower than 0).</section>
		<section type="text" lang="fr">Obtient la coordoné de la gauche de la fenêtre Algo (inférieur à 0).</section>
	</description>
	</reference>
	<reference keyword="algo.getRight" package="algo" function="getRight" syntax="algo.getRight () " type="property" kind="method" platform="both">
	<example>set n = algo.getRight ();</example>
	<description>
		<section type="text" lang="en">Get the right coordonate of Algo window (greater than 0).</section>
		<section type="text" lang="fr">Obtient la coordoné de la droite de la fenêtre Algo (supérieur à 0).</section>
	</description>
	</reference>
	<reference keyword="algo.getWidth" package="algo" function="getWidth" syntax="algo.getWidth () " type="property" kind="method" platform="both">
	<example>set w = algo.getWidth ();</example>
	<description>
		<section type="text" lang="en">Get the width of Algo window.</section>
		<section type="text" lang="fr">Obtient la largeur de la fenêtre Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.getHeight" package="algo" function="getHeight" syntax="algo.getHeight () " type="property" kind="method" platform="both">
	<example>set h = algo.getHeight ();</example>
	<description>
		<section type="text" lang="en">Get the Height of Algo window.</section>
		<section type="text" lang="fr">Obtient la hauteur de la fenêtre Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.show" package="algo" function="show" syntax="algo.show () " type="method" kind="method" platform="both">
	<example>algo.show ();</example>
	<description>
		<section type="text" lang="en">Show the Turtle.</section>
		<section type="text" lang="fr">Montre la tortue.</section>
	</description>
	</reference>
	<reference keyword="algo.hide" package="algo" function="hide" syntax="algo.hide () " type="method" kind="method" platform="both">
	<example>algo.hide ();</example>
	<description>
		<section type="text" lang="en">Hide the Turtle.</section>
		<section type="text" lang="fr">Cache la tortue.</section>
	</description>
	</reference>
	<reference keyword="algo.clear" package="algo" function="clear" syntax="algo.clear () " type="method" kind="method" platform="both">
	<example>algo.clear ();</example>
	<description>
		<section type="text" lang="en">Delete all the visible elements in Algo.</section>
		<section type="text" lang="fr">Vide Algo de tous ses éléments visibles.</section>
	</description>
	</reference>
	<reference keyword="algo.autoClear" package="algo" function="autoClear" syntax="algo.autoClear () " type="method" kind="method" platform="both">
	<example>algo.hide(); util.pulse({algo.autoClear (); algo.jump(10); algo.circle(25)}, 50);</example>
	<description>
		<section type="text" lang="en">Delete all the visible elements in Algo without flicking. Useful for animation and game developpement. Put it at the beginning or the render loop.</section>
		<section type="text" lang="fr">Vide Algo de tous ses éléments visibles sans effet de scintillement. Util pour la programmation d'animation et de jeux vidéos. A placer au début de la boucle de rendu.</section>
	</description>
	</reference>  
	<reference keyword="algo.removeFirst" package="algo" function="removeFirst" syntax="algo.removeFirst () " type="method" kind="method" platform="both">
	<example>algo.removeFirst ();</example>
	<description>
		<section type="text" lang="en">Delete the first drawn element in Algo.</section>
		<section type="text" lang="fr">Supprimer le premier élément dessiné dans Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.removeLast" package="algo" function="removeLast" syntax="algo.removeLast () " type="method" kind="method" platform="both">
	<example>algo.removeLast ();</example>
	<description>
		<section type="text" lang="en">Delete the last drawn element in Algo.</section>
		<section type="text" lang="fr">Supprimer le dernier élément dessiné dans Algo.</section>
	</description>
	</reference>
	<reference keyword="algo.goTo" package="algo" function="goTo" syntax="algo.goTo (x, y) " type="method" kind="method" platform="both">
	<example>algo.goTo (0, 0);</example>
	<description>
		<section type="text" lang="en">Move algo's Turtle to the absolute x, y position in the grid.</section>
		<section type="text" lang="fr">Déplace la tortue aux coordonnées absolus x, y sur la grille.</section>
	</description>
	</reference>
	<reference keyword="algo.lineTo" package="algo" function="lineTo" syntax="algo.lineTo (x, y) " type="method" kind="method" platform="both">
	<example>algo.lineTo (100, 100);</example>
	<description>
		<section type="text" lang="en">Draw line from actual position to x, y one.</section>
		<section type="text" lang="fr">Dessine une ligne depuis la position actuelle vers les coordonnées x, y.</section>
	</description>
	</reference>
	<reference keyword="algo.go" package="algo" function="go" syntax="algo.go (len) " type="method" kind="method" platform="both">
	<example>algo.go (100);</example>
	<description>
		<section type="text" lang="en">Move Algo's Turtle go forward and draw line.</section>
		<section type="text" lang="fr">Fait avancer la tortue en dessinant une ligne.</section>
	</description>
	</reference>
	<reference keyword="algo.jump" package="algo" function="jump" syntax="algo.jump (len) " type="method" kind="method" platform="both">
	<example>algo.jump (100);</example>
	<description>
		<section type="text" lang="en">Move foreward algo's Turtle without drawing anything.</section>
		<section type="text" lang="fr">Fait avancer la tortue sans dessiner de ligne.</section>
	</description>
	</reference>
	<reference keyword="algo.turnRight" package="algo" function="turnRight" syntax="algo.turnRight (angle) " type="method" kind="method" platform="both">
	<example>algo.turnRight (90);</example>
	<description>
		<section type="text" lang="en">Turn right the Algo's Turtle to relative angle.</section>
		<section type="text" lang="fr">Tourne la tortue à droite.</section>
	</description>
	</reference>
	<reference keyword="algo.turnLeft" package="algo" function="turnLeft" syntax="algo.turnLeft (angle) " type="method" kind="method" platform="both">
	<example>algo.turnLeft (90);</example>
	<description>
		<section type="text" lang="en">Turn left the Algo's Turtle to relative angle.</section>
		<section type="text" lang="fr">Tourne la tortue à gauche.</section>
	</description>
	</reference>
	<reference keyword="algo.rotateTo" package="algo" function="rotateTo" syntax="algo.rotateTo (angle) " type="method" kind="method" platform="both">
	<example>algo.rotateTo (90);</example>
	<description>
		<section type="text" lang="en">Rotate Algo's Turtle to absolute angle.</section>
		<section type="text" lang="fr">Tourne la tortue vers un angle absolu.</section>
	</description>
	</reference>
	<reference keyword="algo.circle" package="algo" function="circle" syntax="algo.circle (diameter) " type="method" kind="method" platform="both">
	<example>algo.circle (20);</example>
	<description>
		<section type="text" lang="en">Draw circle at current position.</section>
		<section type="text" lang="fr">Dessine un cercle à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.disc" package="algo" function="disc" syntax="algo.disc (diameter) " type="method" kind="method" platform="both">
	<example>algo.disc (20);</example>
	<description>
		<section type="text" lang="en">Draw filled circle at current position.</section>
		<section type="text" lang="fr">Dessine un cercle plein (un disque) à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.square" package="algo" function="square" syntax="algo.square (size) " type="method" kind="method" platform="both">
	<example>algo.square (100);</example>
	<description>
		<section type="text" lang="en">Draw square at current position.</section>
		<section type="text" lang="fr">Dessine un carré à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.box" package="algo" function="box" syntax="algo.box (size) " type="method" kind="method" platform="both">
	<example>algo.box (100);</example>
	<description>
		<section type="text" lang="en">Draw filled square at current position.</section>
		<section type="text" lang="fr">Dessine un carré plein (une boite) à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.rect" package="algo" function="rect" syntax="algo.rect (width, height) " type="method" kind="method" platform="both">
	<example>algo.rect (20, 30);</example>
	<description>
		<section type="text" lang="en">Draw rectangle at current position.</section>
		<section type="text" lang="fr">Dessine un rectangle à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.plane" package="algo" function="plane" syntax="algo.plane (width, height) " type="method" kind="method" platform="both">
	<example>algo.plane (20, 30);</example>
	<description>
		<section type="text" lang="en">Draw filled rectangle at current position.</section>
		<section type="text" lang="fr">Dessine un rectangle plein (un plan) à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.oval" package="algo" function="oval" syntax="algo.oval (width, height) " type="method" kind="method" platform="both">
	<example>algo.oval (20, 30);</example>
	<description>
		<section type="text" lang="en">Draw oval at current position.</section>
		<section type="text" lang="fr">Dessine un ovale à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.platter" package="algo" function="platter" syntax="algo.platter (width, height) " type="method" kind="method" platform="both">
	<example>algo.platter (20, 30);</example>
	<description>
		<section type="text" lang="en">Draw filled oval at current position.</section>
		<section type="text" lang="fr">Dessine un ovale plein à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.path" package="algo" function="path" syntax="algo.path (array[, closed = true]) " type="method" kind="method" platform="both">
	<example>algo.path ( array {-50, -50, 50, -50});</example>
	<description>
		<section type="text" lang="en">Draw a path. Closed parameter is optional and determine if path is closed, it's default value is true. Be carefull, need an array of x, y pairs as input. First point of the path is always the current position.</section>
		<section type="text" lang="fr">Dessine un chemin fermé. Le paramètre optionel closed définit si la forme est fermé, sa valeur par défaut est vrai. Attention, nécessite un tableau de paires x, y en entrée. Le premier point est toujours la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.poly" package="algo" function="poly" syntax="algo.poly (array[, closed = true]) " type="method" kind="method" platform="both">
	<example>algo.poly (array {-50, -50, 50, -50});</example>
	<description>
		<section type="text" lang="en">Draw a polygone. Closed parameter is optional and determine if path is closed, it's default value is true. Be carefull, need an array of x, y pairs as input. First point of the path is always the current position.</section>
		<section type="text" lang="fr">Dessine un chemin fermé plein (un polygone). Le paramètre optionel closed définit si la forme est fermée, sa valeur par défaut est vrai. Attention, nécessite un tableau de paires x, y en entrée. Le premier point est toujours la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.curve" package="algo" function="curve" syntax="algo.curve (array[, closed = true]) " type="method" kind="method" platform="both">
	<example>algo.curve ( array {-50, -50, 50, -50});</example>
	<description>
		<section type="text" lang="en">Draw a curved path. Closed parameter is optional and determine if path is closed, it's default value is true. Be carefull, need an array of x, y pairs as input. First point of the path is always the current position.</section>
		<section type="text" lang="fr">Dessine un chemin courbe. Le paramètre optionel closed définit si la forme est fermée, sa valeur par défaut est vrai. Attention, nécessite un tableau de paires x, y en entrée. Le premier point est toujours la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.curvedPoly" package="algo" function="curvedPoly" syntax="algo.curvedPoly (array[, closed = true]) " type="method" kind="method" platform="both">
	<example>algo.curvedPoly (array {-50, -50, 50, -50});</example>
	<description>
		<section type="text" lang="en">Draw a polygone. Closed parameter is optional and determine if path is closed, it's default value is true. Be carefull, need an array of x, y pairs as input. First point of the path is always the current position.</section>
		<section type="text" lang="fr">Dessine un chemin plein courbé (un polygone). Le paramètre optionel closed définit si la forme est fermée, sa valeur par défaut est vrai. Attention, nécessite un tableau de paires x, y en entrée. Le premier point est toujours la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.text" package="algo" function="text" syntax="algo.text (text) " type="method" kind="method" platform="both">
	<example>algo.text ("hello world");</example>
	<description>
		<section type="text" lang="en">Draw text at current position.</section>
		<section type="text" lang="fr">Dessine du texte à la position courante.</section>
	</description>
	</reference>
	<reference keyword="algo.onClick" package="algo" function="onClick" syntax="algo.onClick (function (x, y)) " type="event" kind="method" platform="desktop">
	<example>set f = function (x, y) {};algo.onClick (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user click with mouse on algo.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Execute la fonction définit lorsque l'utilisateur clique avec la souris sur algo.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="algo.onRelease" package="algo" function="onRelease" syntax="algo.onRelease (function (x, y)) " type="event" kind="method" platform="desktop">
	<example>set f = function (x, y) {};algo.onRelease (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user has finished to click with the mouse.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur à finit de cliqué Algo avec la souris.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onMove" package="algo" function="onMove" syntax="algo.onMove (function (x, y)) " type="event" kind="method" platform="desktop">
	<example>set f = function (x, y) {};algo.onMove (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user move the mouse on algo.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur glisse la souris sur algo.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onDrag" package="algo" function="onDrag" syntax="algo.onDrag (function (x, y)) " type="event" kind="method" platform="desktop">
	<example>set f = function (x, y) {};algo.onDrag (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user click and move (drag) the mouse on algo.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur clique et glisse la souris sur algo.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onWheel" package="algo" function="onWheel" syntax="algo.onWheel (function (rotation)) " type="event" kind="method" platform="desktop">
	<example>set f = function (rotation) {};algo.onWheel (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user use the mouse wheel over algo.&lt;br&gt;Returned values are 1 for down and -1 for up.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur utilise la roue de la souris sur algo.&lt;br&gt;Retourne 1 pour bas et -1 pour haut.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onKey" package="algo" function="onKey" syntax="algo.onKey (function (key)) " type="event" kind="method" platform="desktop">
	<example>set f = function (key) {};algo.onKey (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user hit a keyboard key.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur tape une touche du clavier.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onTap" package="algo" function="onTap" syntax="algo.onTap (function (x, y)) " type="event" kind="method" platform="both">
	<example>set f = function (x, y) {};algo.onTap (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user Tap with his finger on algo.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Execute la fonction définit lorsque l'utilisateur tape avec son doigt sur algo.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="algo.onTouch" package="algo" function="onTouch" syntax="algo.onTouch (function (x, y)) " type="event" kind="method" platform="both">
	<example>set f = function (x, y) {};algo.onTouch (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user Move his finger on algo.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur glisse son doigt sur algo.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onUp" package="algo" function="onUp" syntax="algo.onUp (function (x, y)) " type="event" kind="method" platform="both">
	<example>set f = function (x, y) {};algo.onUp (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user has finished to Tap with his finger.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur à finit de taper Algo avec son doigt.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onGravity" package="algo" function="onGravity" syntax="algo.onGravity (function (x, y, z)) " type="event" kind="method" platform="android">
	<example>set f = function (x, y, z) {};algo.onGravity (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user turn the device. x, y and z are 3d axis of gravity force and their unit is m/s.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur tourne l'appareil. x, y et z sont les axes 3d sur lesquels s'éxerce la force de gravité en m/s.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="algo.onAcceleration" package="algo" function="onAcceleration" syntax="algo.onAcceleration (function (x, y, z)) " type="event" kind="method" platform="android">
	<example>set f = function (x, y, z) {};algo.onAcceleration (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user move the device. x, y and z are 3d axis of acceleration force and their unit is m/s.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur déplace l'appareil. x, y et z sont les axes 3d sur lesquels s'éxerce la force d'acceleration en m/s.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onGyroscope" package="algo" function="onGyroscope" syntax="algo.onGyroscope (function (x, y, z)) " type="event" kind="method" platform="android">
	<example>set f = function (x, y, z) {};algo.onGyroscope (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user turn the device. x, y and z are 3d axis of rotation force and their unit is degree/s.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur tourne l'appareil. x, y et z sont les axes 3d sur lesquels s'éxerce la force de rotation en degré/s.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onOrientation" package="algo" function="onOrientation" syntax="algo.onOrientation (function (z, x, y)) " type="event" kind="method" platform="android">
	<example>set f = function (z, x, y) {};algo.onOrientation (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user turn the device compared with geomagnetic field. z, y and x are Azimuth, Pitch and Roll and their unit is in degree.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur tourne l'appareil par rapport au champ magnetique de la terre. z, x et y sont l'Azimute, le tangage et le roulis et leur unité est le en degré.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onProximity" package="algo" function="onProximity" syntax="algo.onProximity (function (dist)) " type="event" kind="method" platform="android">
	<example>set f = function (dist) {};algo.onProximity (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when user become near or fare the device. Distance is in cm.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque l'utilisateur de rapproche ou s'éloigne de l'appareil. Distance est en cm.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onTemperature" package="algo" function="onTemperature" syntax="algo.onTemperature (function (t)) " type="event" kind="method" platform="android">
	<example>set f = function (t) {};algo.onTemperature (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when ambient temperature is changing. t is in °C.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque la température ambiente est modifiée. t est en °C.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.onLight" package="algo" function="onLight" syntax="algo.onLight (function (l)) " type="event" kind="method" platform="android">
	<example>set f = function (l) {};algo.onLight (f);</example>
	<description>
		<section type="text" lang="en">Execute defined function when ambient light is changing. l is in lx.&lt;br&gt;When function return a value, it terminate the event.</section>
		<section type="text" lang="fr">Exécute la fonction définit lorsque la lumière ambiente est modifiée. l est en lx.&lt;br&gt;Lorsque la fonction renvoie une valeur, cela termine l'evenement.</section>
	</description>
	</reference>
	<reference keyword="algo.stamp" package="algo.stamp" function="" syntax="" type="" kind="method" platform="both">
	<description>
		<section type="text" lang="en">Stamp is a graphical bitmap that can be drawed in algo.</section>
		<section type="text" lang="fr">Un tampon est un objet graphique bitmap qui peut-être dessiné par duplication (tamponné) dans algo.</section>
	</description>
	</reference>
	<reference keyword="algo.id" package="algo.stamp" function="id" syntax="algo.stamp.id" type="property" kind="method" platform="both">
	<example>set i = algo.stamp.id;</example>
	<description>
		<section type="text" lang="en">The internal algo's stamp identifier.</section>
		<section type="text" lang="fr">L'identifiant interne du tampon dans algo.</section>
	</description>
	</reference>
	<reference keyword="algo.width" package="algo.stamp" function="width" syntax="algo.stamp.width" type="property" kind="method" platform="both">
	<example>set i = algo.stamp.width;</example>
	<description>
		<section type="text" lang="en">The stamp width.</section>
		<section type="text" lang="fr">La largeur du tampon.</section>
	</description>
	</reference>
	<reference keyword="algo.height" package="algo.stamp" function="height" syntax="algo.stamp.height" type="property" kind="method" platform="both">
	<example>set i = algo.stamp.height;</example>
	<description>
		<section type="text" lang="en">The stamp height.</section>
		<section type="text" lang="fr">La hauteur du tampon.</section>
	</description>
	</reference>
	<reference keyword="algo.stamp.clone" package="algo.stamp" function="clone" syntax="algo.stamp.clone (colors, size)" type="prototype" kind="method" platform="both">
	<example>set stamp = algo.stamp.clone (array {{-1, 0, 0, -1},{0, -1, -1, 0},{0, 0, 0, 0},{0, -1, -1, 0}}, 10);</example>
	<description>
		<section type="text" lang="en">Create a new stamp with bitmap information and size.</section>
		<section type="text" lang="fr">Crée un nouveau tampon avec les informations bitmap et la taille.</section>
	</description>
	</reference>
	<reference keyword="algo.stamp.load" package="algo.stamp" function="load" syntax="algo.stamp.load (filename)" type="prototype" kind="method" platform="desktop">
	<example>set stamp = algo.stamp.load ("PlanetCute/Character Horn Girl");</example>
	<description>
		<section type="text" lang="en">Create a new stamp with bitmap image.</section>
		<section type="text" lang="en">Filename must be an existing file. It can be an absolute path or a relative to several default path ([project root]/img or [application root]/img or [user root]/img)</section>
		<section type="text" lang="fr">Crée un nouveau tampon à partir d'une image.</section>
		<section type="text" lang="fr">Le nom du fichier doit correspondre à un fichier existant. Cela peut-être un chemin absolut ou un chemin relatif à plusieurs repertoires par défaut ([project root]/img ou [application root]/img) ou [user root]/img.</section>
		<section type="example">set stamp = algo.stamp.load("PlanetCute/Character Princess Girl");

algo.onTouch((x, y) {
	algo.autoClear();
	algo.goTo(x, y);
  stamp.draw();
});
algo.hide();</section>
	</description>
	</reference>
	<reference keyword="algo.stamp.delete" package="algo.stamp" function="delete" syntax="algo.stamp.delete () " type="method" kind="method" platform="both">
	<example>set stamp = algo.stamp.clone (array {0}, 10);@stamp.delete();</example>
	<description>
		<section type="text" lang="en">Remove the stamp from algo.</section>
		<section type="text" lang="en"></section>
		<section type="text" lang="fr">Supprime le tampon dans algo</section>
		<section type="text" lang="fr"></section>
	</description>
	</reference>
	<reference keyword="algo.stamp.draw" package="algo.stamp" function="draw" syntax="algo.stamp.draw () " type="method" kind="method" platform="both">
	<example>set stamp = algo.stamp.clone (array {0}, 10);@stamp.draw();</example>
	<description>
		<section type="text" lang="en">Duplicate and draw the stamp in algo.</section>
		<section type="text" lang="fr">Duplique et dessine le tampon dans algo.</section>
	</description>
	</reference>
</al>
