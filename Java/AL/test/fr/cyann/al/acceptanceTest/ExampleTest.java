/*
 * Copyright (C) 2011 Yann Caron
 * License modality not yet defined.
 */
package fr.cyann.al.acceptanceTest;

import fr.cyann.al.AL;
import fr.cyann.al.syntax.Syntax;
import fr.cyann.al.visitor.UnitTestRuntime;
import org.junit.Test;

/**
 The EvalTest class.<br> creation date : 8 mai 2012.
 <p>
 @author Yann Caron
 @version v0.1
 */
public class ExampleTest {
//TODO

	@Test
	public void gameOfLifeTest() throws Exception {
		String source = ""
			+ "set SIZE = 10;" + "\n"
			+ "set cells = array {};" + "\n"
			+ "set render = array {};"
			+ "" + "\n"
			+ "" + "\n"
			+ "set cell = object () {" + "\n"
			+ "	set c = 0;" + "\n"
			+ "	set r = 0;" + "\n"
			+ "	set alive = true;" + "\n"
			+ "	set next = true;" + "\n"
			+ ""
			+ "	set eachNeighbours = function (f) {"
			+ "		set cfrom = math.max (c-1, 0);"
			+ "		set cto = math.min (c+1, SIZE-1);"
			+ "		set rfrom = math.max (r-1, 0);"
			+ "		set rto = math.min (r+1, SIZE-1);"
			+ ""
			+ "		for (set row=rfrom; row<=rto; row++) {"
			+ "			for (set col=cfrom; col<=cto; col++) {"
			+ "				if (!(col == c && row == r)) {"
			+ "					f(cells[col][row]);"
			+ "				}"
			+ "			}"
			+ "		}"
			+ "	};"
			+ ""
			+ "	set evalNext = function () {"
			+ "		set count = 0;"
			+ "		eachNeighbours (function (item) {"
			+ "			if (item.alive) {"
			+ "				count++;"
			+ "			}"
			+ "		});"
			+ ""
			+ "		if (count == 3) {"
			+ "			next = true;"
			+ "		} else if (count == 2) {"
			+ "			next = alive;"
			+ "		} else {"
			+ "			next = false;"
			+ "		}"
			+ "	};"
			+ ""
			+ "	set apply = function () {"
			+ "		alive = next;"
			+ "	};"
			+ "" + "\n"
			+ "	set clone = function (c, r) {" + "\n"
			+ "		set o = new this;"
			+ "		set o.c = c;"
			+ "		set o.r = r;"
			+ "		set o.alive = math.random(2);" + "\n"
			+ "		return o;" + "\n"
			+ "	};" + "\n"
			+ "};" + "\n"
			+ "" + "\n"
			+ "set initialize = function () {" + "\n"
			+ "" + "\n"
			+ "	SIZE.loopFor (function (r) {" + "\n"
			+ "		set row = array {};"
			+ "		set rrow = array {};" + "\n"
			+ "		SIZE.loopFor (function (c) {" + "\n"
			+ "			row.add(cell.clone(c, r));"
			+ "			rrow.add(-1);" + "\n"
			+ "		});" + "\n"
			+ "" + "\n"
			+ "		cells.add(row);"
			+ "		render.add(rrow);" + "\n"
			+ "	});" + "\n"
			+ "};" + "\n"
			+ ""
			+ "initialize();" + "\n"
			+ ""
			+ "set evalNext = function () {"
			+ "	cells.eachItem(function (item) {"
			+ "		item.evalNext();"
			+ "	});"
			+ "	cells.eachItem(function (item) {"
			+ "		item.apply();"
			+ "	});"
			+ "};"
			+ "set draw = function () {"
			+ "	cells.each(function (line, row) {"
			+ "		line.each (function (item, col) {"
			+ "			if (item.alive) {"
			+ "				render[col][row] = 3;"
			+ "			} else {"
			+ "				render[col][row] = -1;"
			+ "			}"
			+ "		});"
			+ "	});"
			+ "	print (render);"
			+ "};"
			+ ""
			+ "draw ();"
			+ "SIZE.loopFor (function () {"
			+ "	evalNext();"
			+ "	draw ();"
			+ "});"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void gameOfLifeSemiColonTest() throws Exception {
		String source = ""
			+ "set SIZE = 10" + "\n"
			+ "set cells = array {}" + "\n"
			+ "set render = array {}" + "\n"
			+ "" + "\n"
			+ "" + "\n"
			+ "set cell = object () {" + "\n"
			+ "	set c = 0" + "\n"
			+ "	set r = 0" + "\n"
			+ "	set alive = true" + "\n"
			+ "	set next = true" + "\n"
			+ "" + "\n"
			+ "	set eachNeighbours = function (f) {" + "\n"
			+ "		set cfrom = math.max (c-1, 0)" + "\n"
			+ "		set cto = math.min (c+1, SIZE-1)" + "\n"
			+ "		set rfrom = math.max (r-1, 0)" + "\n"
			+ "		set rto = math.min (r+1, SIZE-1)" + "\n"
			+ "" + "\n"
			+ "		for (set row=rfrom; row<=rto; row++) {" + "\n"
			+ "			for (set col=cfrom; col<=cto; col++) {" + "\n"
			+ "				if (!(col == c && row == r)) {" + "\n"
			+ "					f(cells[col][row])" + "\n"
			+ "				}" + "\n"
			+ "			}" + "\n"
			+ "		}" + "\n"
			+ "	}" + "\n"
			+ "" + "\n"
			+ "	set evalNext = function () {" + "\n"
			+ "		set count = 0" + "\n"
			+ "		eachNeighbours (function (item) {" + "\n"
			+ "			if (item.alive) {" + "\n"
			+ "				count++" + "\n"
			+ "			}" + "\n"
			+ "		})" + "\n"
			+ ""
			+ "		if (count == 3) {"
			+ "			next = true"
			+ "		} else if (count == 2) {"
			+ "			next = alive"
			+ "		} else {"
			+ "			next = false"
			+ "		}"
			+ "	}"
			+ ""
			+ "	set apply = function () {"
			+ "		alive = next"
			+ "	}"
			+ "" + "\n"
			+ "	set clone = function (c, r) {" + "\n"
			+ "		set o = new this"
			+ "		set o.c = c"
			+ "		set o.r = r"
			+ "		set o.alive = math.random(2)" + "\n"
			+ "		return o" + "\n"
			+ "	}" + "\n"
			+ "}" + "\n"
			+ "" + "\n"
			+ "set initialize = function () {" + "\n"
			+ "" + "\n"
			+ "	SIZE.loopFor (function (r) {" + "\n"
			+ "		set row = array {}"
			+ "		set rrow = array {}" + "\n"
			+ "		SIZE.loopFor (function (c) {" + "\n"
			+ "			row.add(cell.clone(c, r))"
			+ "			rrow.add(-1)" + "\n"
			+ "		})" + "\n"
			+ "" + "\n"
			+ "		cells.add(row)"
			+ "		render.add(rrow)" + "\n"
			+ "	})" + "\n"
			+ "}" + "\n"
			+ ""
			+ "initialize()" + "\n"
			+ ""
			+ "set evalNext = function () {"
			+ "	cells.eachItem(function (item) {"
			+ "		item.evalNext()"
			+ "	})"
			+ "	cells.eachItem(function (item) {"
			+ "		item.apply()"
			+ "	})"
			+ "}"
			+ "set draw = function () {"
			+ "	cells.each(function (line, row) {"
			+ "		line.each (function (item, col) {"
			+ "			if (item.alive) {"
			+ "				render[col][row] = 3"
			+ "			} else {"
			+ "				render[col][row] = -1"
			+ "			}"
			+ "		})"
			+ "	})"
			+ "	print (render)"
			+ "}"
			+ ""
			+ "draw ()"
			+ "SIZE.loopFor (function () {"
			+ "	evalNext()"
			+ "	draw ()"
			+ "})"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void aopTest() throws Exception {
		String source = ""
			+ "set superO = object () {"
			+ "	set superMeth = function (s) {"
			+ "		print (\"Execute SUPER method with param : \" .. s);"
			+ "	};"
			+ "};"
			+ ""
			+ "set o = object (superO) {"
			+ "	set meth = function (s) {"
			+ "		print (\"Execute method with param : \" .. s);"
			+ "	};"
			+ "};"
			+ ""
			+ "set logger = function (s, decored) {"
			+ "	print (\"Before decored execution\");"
			+ "	decored(s);"
			+ "	print (\"After decored execution\");"
			+ "};"
			+ ""
			+ "set myO = new o;"
			+ ""
			+ "myO.setAttribute(\"meth\", myO.meth.decorate(logger));"
			+ "myO.meth(\"Hi I am algoid !\");"
			+ ""
			+ "print (\"--------\");"
			+ ""
			+ "set myO.superMeth = myO.superMeth.decorate(logger);"
			+ "myO.superMeth(\"Hi I am algoid !\");"
			+ ""
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void aopCloneTest() throws Exception {
		String source = ""
			+ "set superO = object () {"
			+ "	set superMeth = function (s) {"
			+ "		print (\"Execute SUPER method with param : \" .. s);"
			+ "	};"
			+ "};"
			+ ""
			+ "set o = object (superO) {"
			+ "	set meth = function (s) {"
			+ "		print (\"Execute method with param : \" .. s);"
			+ "	};"
			+ "};"
			+ ""
			+ "set logger = function (s, decored) {"
			+ "	print (\"Before decored execution\");"
			+ "	decored(s);"
			+ "	print (\"After decored execution\");"
			+ "};"
			+ ""
			+ "set myO = o.clone();"
			+ ""
			+ "myO.setAttribute(\"meth\", myO.meth.decorate(logger));"
			+ "myO.meth(\"Hi I am algoid !\");"
			+ ""
			+ "print (\"--------\");"
			+ ""
			+ "set myO.superMeth = myO.superMeth.decorate(logger);"
			+ "myO.superMeth(\"Hi I am algoid !\");"
			+ ""
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void duckTypingTest() throws Exception {
		String source = ""
			+ "set duck = object () {"
			+ "	set quack = function () {"
			+ "		print (\"Quaaaaaack! Quaaaaaack!\");"
			+ "	};"
			+ "};"
			+ ""
			+ "set cow = object () {"
			+ "	set quack = function () {"
			+ "		print (\"Hey! I am not a duck, I am a cow, so I say moooooo!\");"
			+ "	};"
			+ "};"
			+ ""
			+ "set animals = array {new duck, new cow};"
			+ ""
			+ "animals.each (function (item) {"
			+ "	item.quack();"
			+ "});"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void parsing1Test() throws Exception {
		String source = ""
			+ "set csv;"
			+ "csv   = \"data 1.1; data 1.2; data 1.3; data 1.4\\n\";"
			+ "csv ..= \"data 2.1; data 2.2; data 2.3; data 2.4\\n\";"
			+ "csv ..= \"data 3.1; data 3.2; data 3.3; data 3.4\\n\";"
			+ "csv ..= \"data 4.1; data 4.2; data 4.3; data 4.4\\n\";"
			+ ""
			+ "set values = csv.split (\"\\n\").each (function (item) {"
			+ "	return item.split (\";\").each(function (item) {"
			+ "		return item.trim();"
			+ "	});"
			+ "});"
			+ ""
			+ "values.eachItem(function (item) {"
			+ "	print (\"parsed data : [\" .. item .. \"]\");"
			+ "});"
			+ ""
			+ "set i = 0;"
			+ "unit.assertEquals(array{\"data 1.1\", \"data 1.2\", \"data 1.3\", \"data 1.4\"}, values[i]);"
			+ "unit.assertEquals(array{\"data 2.1\", \"data 2.2\", \"data 2.3\", \"data 2.4\"}, values[i++]);"
			+ "unit.assertEquals(array{\"data 3.1\", \"data 3.2\", \"data 3.3\", \"data 3.4\"}, values[i++]);"
			+ "unit.assertEquals(array{\"data 4.1\", \"data 4.2\", \"data 4.3\", \"data 4.4\"}, values[i++]);"
			+ ""
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void parsing2Test() throws Exception {
		String source = ""
			+ "set csv;"
			+ "csv   = \"data 1.1data 1.2data 1.3data 1.4\\n\";"
			+ "csv ..= \"data 2.1data 2.2data 2.3data 2.4\\n\";"
			+ "csv ..= \"data 3.1data 3.2data 3.3data 3.4\\n\";"
			+ "csv ..= \"data 4.1data 4.2data 4.3data 4.4\\n\";"
			+ ""
			+ "set columns = array {8, 16, 24, 32};"
			+ ""
			+ "set values = csv.split (\"\\n\").each (function (item) {"
			+ "	return item.splitAt (columns);"
			+ "});"
			+ ""
			+ "values.eachItem(function (item) {"
			+ "	print (\"parsed data : [\" .. item .. \"]\");"
			+ "});"
			+ "set i = 0;"
			+ "unit.assertEquals(array{\"data 1.1\", \"data 1.2\", \"data 1.3\", \"data 1.4\"}, values[i]);"
			+ "unit.assertEquals(array{\"data 2.1\", \"data 2.2\", \"data 2.3\", \"data 2.4\"}, values[i++]);"
			+ "unit.assertEquals(array{\"data 3.1\", \"data 3.2\", \"data 3.3\", \"data 3.4\"}, values[i++]);"
			+ "unit.assertEquals(array{\"data 4.1\", \"data 4.2\", \"data 4.3\", \"data 4.4\"}, values[i++]);"
			+ ""
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void lexicalClosureTest() throws Exception {
		String source = ""
			+ "set add = function (a, b) {"
			+ "	return a + b;"
			+ "};"
			+ ""
			+ "set pow2 = function (a) {"
			+ "	return math.dbl(a);"
			+ "};"
			+ ""
			+ "set bound = function (min, max, f) {"
			+ "	set n = f();"
			+ "	if (n < min) {"
			+ "		n = min;"
			+ "	}"
			+ "	if (n > max) {"
			+ "		n = max;"
			+ "	}"
			+ "	return n;"
			+ "};"
			+ "" + "\n"
			+ "// prepare parameters without calling function" + "\n"
			+ "add.setParameter(\"a\", 7).setParameter(\"b\", 8);"
			+ "print (\"0 < 7 + 8 < 10 = \" .. bound (0, 10, add));"
			+ "print (\"0 < 7 + 8 < 100 = \" .. bound (0, 100, add));"
			+ ""
			+ "unit.equals (10, bound (0, 10, add));"
			+ "unit.equals (15, bound (0, 100, add));"
			+ ""
			+ "pow2.setParameter(\"a\", 7);"
			+ "print (\"0 < 7 + 8 < 10 = \" .. bound (0, 10, pow2));"
			+ "print (\"0 < 7 + 8 < 100 = \" .. bound (0, 100, pow2));"
			+ ""
			+ "unit.equals (10, bound (0, 10, pow2));"
			+ "unit.equals (49, bound (0, 100, pow2));"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void cascadeTest() throws Exception {
		String source = ""
			+ "// the following expression" + "\n"
			+ "set exp = 1 + 2 - 4 / 2;" + "\n"
			+ "print (\"exp = \" .. exp);" + "\n"
			+ "" + "\n"
			+ "// can be written" + "\n"
			+ "set cas = (1).addition(2).substract((4).divide(2));"
			+ "print (\"cas = \" .. cas);" + "\n"
			+ ""
			+ "// the following expression" + "\n"
			+ "if (exp == cas) {"
			+ "	print (\"It's working\");"
			+ "}"
			+ ""
			+ "// can be written" + "\n"
			+ "exp.equals(cas).ifTrue(function () {"
			+ "	print (\"It's working too\");"
			+ "});"
			+ ""
			+ "// the following expression" + "\n"
			+ "for (set i = 0; i<5; i++) {"
			+ "	print (\"For loop iteration \" .. i);"
			+ "}"
			+ ""
			+ "// can be written" + "\n"
			+ "(5).loopFor (function (i) {"
			+ "	print (\"loopFor iteration \" .. i);"
			+ "});"
			+ "" + "\n"
			+ "unit.equals (exp, cas);" + "\n"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void ageProblemTest() throws Exception {
		String source = ""
			+ "set dog = object {"
			+ "	set name; set age; set genre;"
			+ ""
			+ "	set clone = function (name, genre, age) {"
			+ "		set o = new this;"
			+ "		o.name = name;"
			+ "		o.age = age;"
			+ "		o.genre = genre;"
			+ "		return o;"
			+ "	};"
			+ "};"
			+ "set dogs = array {"
			+ "	dog.clone(\"effy\", 0, 5),"
			+ "	dog.clone(\"wolf\", 0, 7),"
			+ "	dog.clone(\"lili\", 1, 7),"
			+ "	dog.clone(\"poupette\", 1, 10),"
			+ "	dog.clone(\"rouquette\", 1, 11),"
			+ "	dog.clone(\"rouky\", 0, 8),"
			+ "	dog.clone(\"athos\", 0, 3)"
			+ "};"
			+ ""
			+ "set average = function (gender) {"
			+ "	set ages;"
			+ "	dogs.filter (function (item) {"
			+ "		return item.genre == gender;"
			+ "	}).each(function (item) {"
			+ "		ages.add(item.age);"
			+ "	});"
			+ "	set total = ages.join (al.combine.sum);"
			+ "	return total / ages.length();"
			+ "};"
			+ ""
			+ "print (\"The average of male dog ages is \" .. average(0));"
			+ "unit.assertEquals(5.75, average(0));"
			+ "print (\"The average of female dog ages is \" .. average(1));"
			+ "unit.assertEquals(9.3333333, average(1));"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

	@Test
	public void associativeArrayByObjectTest() throws Exception {
		String source = ""
			+ "set o = object () {"
			+ "	set id = 0;"
			+ ""
			+ "	set clone = function (id) {"
			+ "		set o = new this;"
			+ "		o.id = id;"
			+ "		return o;"
			+ "	};"
			+ "};"
			+ ""
			+ "set o0 = o.clone(0);"
			+ "set o1 = o.clone(1);"
			+ ""
			+ "set a = array {"
			+ "	o0 : 1, o1 : 2"
			+ "};"
			+ ""
			+ "unit.assertEquals (1, a[o0]);"
			+ "unit.assertEquals (2, a[o1]);"
			+ "unit.assertEquals (nil, a[o.clone(0)]);"
			+ "" + "\n";

		AL.execute(new Syntax(), new UnitTestRuntime(), source);
	}

}
